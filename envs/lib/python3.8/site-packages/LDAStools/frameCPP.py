# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _frameCPP
else:
    import _frameCPP

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _frameCPP.SWIG_PyInstanceMethod_New
_swig_new_static_method = _frameCPP.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


SHARED_PTR_DISOWN = _frameCPP.SHARED_PTR_DISOWN
r"""1"""
class SwigPyIterator(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _frameCPP.delete_SwigPyIterator
    value = _swig_new_instance_method(_frameCPP.SwigPyIterator_value)
    incr = _swig_new_instance_method(_frameCPP.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_frameCPP.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_frameCPP.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_frameCPP.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_frameCPP.SwigPyIterator_copy)
    next = _swig_new_instance_method(_frameCPP.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_frameCPP.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_frameCPP.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_frameCPP.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_frameCPP.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_frameCPP.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_frameCPP.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_frameCPP.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_frameCPP.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_frameCPP.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _frameCPP:
_frameCPP.SwigPyIterator_swigregister(SwigPyIterator)

class Parameter_type(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Parameter_type self) -> Parameter_type
        __init__(Parameter_type self, std::string first, double second) -> Parameter_type
        __init__(Parameter_type self, Parameter_type other) -> Parameter_type
        1
        """
        _frameCPP.Parameter_type_swiginit(self, _frameCPP.new_Parameter_type(*args))
    first = property(_frameCPP.Parameter_type_first_get, _frameCPP.Parameter_type_first_set, doc=r"""
    first : std::string
    1
    """)
    second = property(_frameCPP.Parameter_type_second_get, _frameCPP.Parameter_type_second_set, doc=r"""
    second : double
    1
    """)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _frameCPP.delete_Parameter_type

# Register Parameter_type in _frameCPP:
_frameCPP.Parameter_type_swigregister(Parameter_type)

class Parameters_type(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_frameCPP.Parameters_type_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_frameCPP.Parameters_type___nonzero__)
    __bool__ = _swig_new_instance_method(_frameCPP.Parameters_type___bool__)
    __len__ = _swig_new_instance_method(_frameCPP.Parameters_type___len__)
    __getslice__ = _swig_new_instance_method(_frameCPP.Parameters_type___getslice__)
    __setslice__ = _swig_new_instance_method(_frameCPP.Parameters_type___setslice__)
    __delslice__ = _swig_new_instance_method(_frameCPP.Parameters_type___delslice__)
    __delitem__ = _swig_new_instance_method(_frameCPP.Parameters_type___delitem__)
    __getitem__ = _swig_new_instance_method(_frameCPP.Parameters_type___getitem__)
    __setitem__ = _swig_new_instance_method(_frameCPP.Parameters_type___setitem__)
    pop = _swig_new_instance_method(_frameCPP.Parameters_type_pop)
    append = _swig_new_instance_method(_frameCPP.Parameters_type_append)
    empty = _swig_new_instance_method(_frameCPP.Parameters_type_empty)
    size = _swig_new_instance_method(_frameCPP.Parameters_type_size)
    swap = _swig_new_instance_method(_frameCPP.Parameters_type_swap)
    begin = _swig_new_instance_method(_frameCPP.Parameters_type_begin)
    end = _swig_new_instance_method(_frameCPP.Parameters_type_end)
    rbegin = _swig_new_instance_method(_frameCPP.Parameters_type_rbegin)
    rend = _swig_new_instance_method(_frameCPP.Parameters_type_rend)
    clear = _swig_new_instance_method(_frameCPP.Parameters_type_clear)
    get_allocator = _swig_new_instance_method(_frameCPP.Parameters_type_get_allocator)
    pop_back = _swig_new_instance_method(_frameCPP.Parameters_type_pop_back)
    erase = _swig_new_instance_method(_frameCPP.Parameters_type_erase)

    def __init__(self, *args):
        r"""
        __init__(Parameters_type self) -> Parameters_type
        __init__(Parameters_type self, Parameters_type other) -> Parameters_type
        __init__(Parameters_type self, std::vector< std::pair< std::string,double > >::size_type size) -> Parameters_type
        __init__(Parameters_type self, std::vector< std::pair< std::string,double > >::size_type size, Parameter_type value) -> Parameters_type
        1
        """
        _frameCPP.Parameters_type_swiginit(self, _frameCPP.new_Parameters_type(*args))
    push_back = _swig_new_instance_method(_frameCPP.Parameters_type_push_back)
    front = _swig_new_instance_method(_frameCPP.Parameters_type_front)
    back = _swig_new_instance_method(_frameCPP.Parameters_type_back)
    assign = _swig_new_instance_method(_frameCPP.Parameters_type_assign)
    resize = _swig_new_instance_method(_frameCPP.Parameters_type_resize)
    insert = _swig_new_instance_method(_frameCPP.Parameters_type_insert)
    reserve = _swig_new_instance_method(_frameCPP.Parameters_type_reserve)
    capacity = _swig_new_instance_method(_frameCPP.Parameters_type_capacity)
    __swig_destroy__ = _frameCPP.delete_Parameters_type

# Register Parameters_type in _frameCPP:
_frameCPP.Parameters_type_swigregister(Parameters_type)

class GPSTime(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(GPSTime self) -> GPSTime
        __init__(GPSTime self, INT_4U const Seconds, INT_4U const Nanoseconds) -> GPSTime
        1
        """
        _frameCPP.GPSTime_swiginit(self, _frameCPP.new_GPSTime(*args))
    Now = _swig_new_instance_method(_frameCPP.GPSTime_Now)
    GetSeconds = _swig_new_instance_method(_frameCPP.GPSTime_GetSeconds)
    GetNanoseconds = _swig_new_instance_method(_frameCPP.GPSTime_GetNanoseconds)
    __swig_destroy__ = _frameCPP.delete_GPSTime

# Register GPSTime in _frameCPP:
_frameCPP.GPSTime_swigregister(GPSTime)

class STRING(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(STRING self) -> STRING
        1
        """
        _frameCPP.STRING_swiginit(self, _frameCPP.new_STRING())
    __swig_destroy__ = _frameCPP.delete_STRING

# Register STRING in _frameCPP:
_frameCPP.STRING_swigregister(STRING)

class Dimension(object):
    r"""
    The Dimension class describes a single dimension information of
       a single or multiple dimensional array.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Dimension self) -> Dimension
        __init__(Dimension self, Dimension::nx_type Nx, Dimension::dx_type Dx, char const * UnitX, Dimension::startX_type StartX) -> Dimension
        The Dimension class describes a single dimension information of
           a single or multiple dimensional array.
        """
        _frameCPP.Dimension_swiginit(self, _frameCPP.new_Dimension(*args))
    GetNx = _swig_new_instance_method(_frameCPP.Dimension_GetNx)
    GetDx = _swig_new_instance_method(_frameCPP.Dimension_GetDx)
    GetStartX = _swig_new_instance_method(_frameCPP.Dimension_GetStartX)
    GetUnitX = _swig_new_instance_method(_frameCPP.Dimension_GetUnitX)
    SetDx = _swig_new_instance_method(_frameCPP.Dimension_SetDx)
    SetNx = _swig_new_instance_method(_frameCPP.Dimension_SetNx)
    SetStartX = _swig_new_instance_method(_frameCPP.Dimension_SetStartX)
    nx = property(_frameCPP.Dimension_nx_get, doc=r"""
    nx : Dimension::nx_type
    1
    """)
    dx = property(_frameCPP.Dimension_dx_get, doc=r"""
    dx : Dimension::dx_type
    1
    """)
    startX = property(_frameCPP.Dimension_startX_get, doc=r"""
    startX : Dimension::startX_type
    1
    """)
    unitX = property(_frameCPP.Dimension_unitX_get, doc=r"""
    unitX : r.q(const).std::string
    1
    """)
    __swig_destroy__ = _frameCPP.delete_Dimension

# Register Dimension in _frameCPP:
_frameCPP.Dimension_swigregister(Dimension)

class DimensionContainer(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_frameCPP.DimensionContainer_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_frameCPP.DimensionContainer___nonzero__)
    __bool__ = _swig_new_instance_method(_frameCPP.DimensionContainer___bool__)
    __len__ = _swig_new_instance_method(_frameCPP.DimensionContainer___len__)
    __getslice__ = _swig_new_instance_method(_frameCPP.DimensionContainer___getslice__)
    __setslice__ = _swig_new_instance_method(_frameCPP.DimensionContainer___setslice__)
    __delslice__ = _swig_new_instance_method(_frameCPP.DimensionContainer___delslice__)
    __delitem__ = _swig_new_instance_method(_frameCPP.DimensionContainer___delitem__)
    __getitem__ = _swig_new_instance_method(_frameCPP.DimensionContainer___getitem__)
    __setitem__ = _swig_new_instance_method(_frameCPP.DimensionContainer___setitem__)
    pop = _swig_new_instance_method(_frameCPP.DimensionContainer_pop)
    append = _swig_new_instance_method(_frameCPP.DimensionContainer_append)
    empty = _swig_new_instance_method(_frameCPP.DimensionContainer_empty)
    size = _swig_new_instance_method(_frameCPP.DimensionContainer_size)
    swap = _swig_new_instance_method(_frameCPP.DimensionContainer_swap)
    begin = _swig_new_instance_method(_frameCPP.DimensionContainer_begin)
    end = _swig_new_instance_method(_frameCPP.DimensionContainer_end)
    rbegin = _swig_new_instance_method(_frameCPP.DimensionContainer_rbegin)
    rend = _swig_new_instance_method(_frameCPP.DimensionContainer_rend)
    clear = _swig_new_instance_method(_frameCPP.DimensionContainer_clear)
    get_allocator = _swig_new_instance_method(_frameCPP.DimensionContainer_get_allocator)
    pop_back = _swig_new_instance_method(_frameCPP.DimensionContainer_pop_back)
    erase = _swig_new_instance_method(_frameCPP.DimensionContainer_erase)

    def __init__(self, *args):
        r"""
        __init__(DimensionContainer self) -> DimensionContainer
        __init__(DimensionContainer self, DimensionContainer other) -> DimensionContainer
        __init__(DimensionContainer self, std::vector< Dimension >::size_type size) -> DimensionContainer
        __init__(DimensionContainer self, std::vector< Dimension >::size_type size, Dimension value) -> DimensionContainer
        1
        """
        _frameCPP.DimensionContainer_swiginit(self, _frameCPP.new_DimensionContainer(*args))
    push_back = _swig_new_instance_method(_frameCPP.DimensionContainer_push_back)
    front = _swig_new_instance_method(_frameCPP.DimensionContainer_front)
    back = _swig_new_instance_method(_frameCPP.DimensionContainer_back)
    assign = _swig_new_instance_method(_frameCPP.DimensionContainer_assign)
    resize = _swig_new_instance_method(_frameCPP.DimensionContainer_resize)
    insert = _swig_new_instance_method(_frameCPP.DimensionContainer_insert)
    reserve = _swig_new_instance_method(_frameCPP.DimensionContainer_reserve)
    capacity = _swig_new_instance_method(_frameCPP.DimensionContainer_capacity)
    __swig_destroy__ = _frameCPP.delete_DimensionContainer

# Register DimensionContainer in _frameCPP:
_frameCPP.DimensionContainer_swigregister(DimensionContainer)

class FrVect(object):
    r"""

    FrVect (Vector Data) implementation of the frame specification.

      Attributes:

        name      Channel name -- not required to be unique.
        compress  Compression algorithm number.
        type      Vector class.
        nData     Number of sample elements in data series.
        nBytes    Number of bytes in the compressed vector.
        nDim      Dimensionality of data vector.
        unitY     String describing how to interpret the value of
                  each element. If dimensionless, then unitY == <NONE>,
                  in CAPITALS (without <...>).
        dims      List of information describing each dimension of
                  the data vector.

    The FrVect class implements the FrVect structure as specified in
       the lastest approved frame specification.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    RAW = _frameCPP.FrVect_RAW
    r"""1"""
    BIGENDIAN_RAW = _frameCPP.FrVect_BIGENDIAN_RAW
    r"""1"""
    LITTLEENDIAN_RAW = _frameCPP.FrVect_LITTLEENDIAN_RAW
    r"""1"""
    GZIP = _frameCPP.FrVect_GZIP
    r"""1"""
    BIGENDIAN_GZIP = _frameCPP.FrVect_BIGENDIAN_GZIP
    r"""1"""
    LITTLEENDIAN_GZIP = _frameCPP.FrVect_LITTLEENDIAN_GZIP
    r"""1"""
    DIFF_GZIP = _frameCPP.FrVect_DIFF_GZIP
    r"""1"""
    BIGENDIAN_DIFF_GZIP = _frameCPP.FrVect_BIGENDIAN_DIFF_GZIP
    r"""1"""
    LITTLEENDIAN_DIFF_GZIP = _frameCPP.FrVect_LITTLEENDIAN_DIFF_GZIP
    r"""1"""
    ZERO_SUPPRESS_WORD_2 = _frameCPP.FrVect_ZERO_SUPPRESS_WORD_2
    r"""1"""
    BIGENDIAN_ZERO_SUPPRESS_WORD_2 = _frameCPP.FrVect_BIGENDIAN_ZERO_SUPPRESS_WORD_2
    r"""1"""
    LITTLEENDIAN_ZERO_SUPPRESS_WORD_2 = _frameCPP.FrVect_LITTLEENDIAN_ZERO_SUPPRESS_WORD_2
    r"""1"""
    ZERO_SUPPRESS_WORD_4 = _frameCPP.FrVect_ZERO_SUPPRESS_WORD_4
    r"""1"""
    BIGENDIAN_ZERO_SUPPRESS_WORD_4 = _frameCPP.FrVect_BIGENDIAN_ZERO_SUPPRESS_WORD_4
    r"""1"""
    LITTLEENDIAN_ZERO_SUPPRESS_WORD_4 = _frameCPP.FrVect_LITTLEENDIAN_ZERO_SUPPRESS_WORD_4
    r"""1"""
    ZERO_SUPPRESS_WORD_8 = _frameCPP.FrVect_ZERO_SUPPRESS_WORD_8
    r"""1"""
    BIGENDIAN_ZERO_SUPPRESS_WORD_8 = _frameCPP.FrVect_BIGENDIAN_ZERO_SUPPRESS_WORD_8
    r"""1"""
    LITTLEENDIAN_ZERO_SUPPRESS_WORD_8 = _frameCPP.FrVect_LITTLEENDIAN_ZERO_SUPPRESS_WORD_8
    r"""1"""
    ZERO_SUPPRESS_OTHERWISE_GZIP = _frameCPP.FrVect_ZERO_SUPPRESS_OTHERWISE_GZIP
    r"""1"""
    FR_VECT_C = _frameCPP.FrVect_FR_VECT_C
    r"""1"""
    FR_VECT_1U = _frameCPP.FrVect_FR_VECT_1U
    r"""1"""
    FR_VECT_2S = _frameCPP.FrVect_FR_VECT_2S
    r"""1"""
    FR_VECT_2U = _frameCPP.FrVect_FR_VECT_2U
    r"""1"""
    FR_VECT_4S = _frameCPP.FrVect_FR_VECT_4S
    r"""1"""
    FR_VECT_4U = _frameCPP.FrVect_FR_VECT_4U
    r"""1"""
    FR_VECT_8S = _frameCPP.FrVect_FR_VECT_8S
    r"""1"""
    FR_VECT_8U = _frameCPP.FrVect_FR_VECT_8U
    r"""1"""
    FR_VECT_4R = _frameCPP.FrVect_FR_VECT_4R
    r"""1"""
    FR_VECT_8R = _frameCPP.FrVect_FR_VECT_8R
    r"""1"""
    FR_VECT_8C = _frameCPP.FrVect_FR_VECT_8C
    r"""1"""
    FR_VECT_16C = _frameCPP.FrVect_FR_VECT_16C
    r"""1"""
    FR_VECT_STRING = _frameCPP.FrVect_FR_VECT_STRING
    r"""1"""

    def __init__(self, *args):
        r"""

        FrVect (Vector Data) implementation of the frame specification.

          Attributes:

            name      Channel name -- not required to be unique.
            compress  Compression algorithm number.
            type      Vector class.
            nData     Number of sample elements in data series.
            nBytes    Number of bytes in the compressed vector.
            nDim      Dimensionality of data vector.
            unitY     String describing how to interpret the value of
                      each element. If dimensionless, then unitY == <NONE>,
                      in CAPITALS (without <...>).
            dims      List of information describing each dimension of
                      the data vector.

        FrVect (Vector Data) implementation of the frame specification.

          Attributes:

            name      Channel name -- not required to be unique.
            compress  Compression algorithm number.
            type      Vector class.
            nData     Number of sample elements in data series.
            nBytes    Number of bytes in the compressed vector.
            nDim      Dimensionality of data vector.
            unitY     String describing how to interpret the value of
                      each element. If dimensionless, then unitY == <NONE>,
                      in CAPITALS (without <...>).
            dims      List of information describing each dimension of
                      the data vector.

        The FrVect class implements the FrVect structure as specified in
           the lastest approved frame specification.
        """
        _frameCPP.FrVect_swiginit(self, _frameCPP.new_FrVect(*args))
    GetName = _swig_new_instance_method(_frameCPP.FrVect_GetName)
    GetCompress = _swig_new_instance_method(_frameCPP.FrVect_GetCompress)
    GetType = _swig_new_instance_method(_frameCPP.FrVect_GetType)
    GetNData = _swig_new_instance_method(_frameCPP.FrVect_GetNData)
    GetNBytes = _swig_new_instance_method(_frameCPP.FrVect_GetNBytes)
    GetNDim = _swig_new_instance_method(_frameCPP.FrVect_GetNDim)
    GetDim = _swig_new_instance_method(_frameCPP.FrVect_GetDim)
    GetDims = _swig_new_instance_method(_frameCPP.FrVect_GetDims)
    GetUnitY = _swig_new_instance_method(_frameCPP.FrVect_GetUnitY)
    GetDataUncompressed = _swig_new_instance_method(_frameCPP.FrVect_GetDataUncompressed)
    GetDataArray = _swig_new_instance_method(_frameCPP.FrVect_GetDataArray)
    name = property(_frameCPP.FrVect_name_get, doc=r"""
    name : r.q(const).std::string
    1
    """)
    compress = property(_frameCPP.FrVect_compress_get, doc=r"""
    compress : FrVect::compress_type
    1
    """)
    type = property(_frameCPP.FrVect_type_get, doc=r"""
    type : FrVect::type_type
    1
    """)
    nData = property(_frameCPP.FrVect_nData_get, doc=r"""
    nData : FrVect::nData_type
    1
    """)
    nBytes = property(_frameCPP.FrVect_nBytes_get, doc=r"""
    nBytes : FrVect::nBytes_type
    1
    """)
    nDim = property(_frameCPP.FrVect_nDim_get, doc=r"""
    nDim : FrVect::nDim_type
    1
    """)
    unitY = property(_frameCPP.FrVect_unitY_get, doc=r"""
    unitY : r.q(const).std::string
    1
    """)
    dims = property(_frameCPP.FrVect_dims_get, doc=r"""
    dims : r.FrVect::dimension_container_type
    1
    """)
    __swig_destroy__ = _frameCPP.delete_FrVect

# Register FrVect in _frameCPP:
_frameCPP.FrVect_swigregister(FrVect)

class FrVectContainerBase(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_frameCPP.FrVectContainerBase_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_frameCPP.FrVectContainerBase___nonzero__)
    __bool__ = _swig_new_instance_method(_frameCPP.FrVectContainerBase___bool__)
    __len__ = _swig_new_instance_method(_frameCPP.FrVectContainerBase___len__)
    __getslice__ = _swig_new_instance_method(_frameCPP.FrVectContainerBase___getslice__)
    __setslice__ = _swig_new_instance_method(_frameCPP.FrVectContainerBase___setslice__)
    __delslice__ = _swig_new_instance_method(_frameCPP.FrVectContainerBase___delslice__)
    __delitem__ = _swig_new_instance_method(_frameCPP.FrVectContainerBase___delitem__)
    __getitem__ = _swig_new_instance_method(_frameCPP.FrVectContainerBase___getitem__)
    __setitem__ = _swig_new_instance_method(_frameCPP.FrVectContainerBase___setitem__)
    pop = _swig_new_instance_method(_frameCPP.FrVectContainerBase_pop)
    append = _swig_new_instance_method(_frameCPP.FrVectContainerBase_append)
    empty = _swig_new_instance_method(_frameCPP.FrVectContainerBase_empty)
    size = _swig_new_instance_method(_frameCPP.FrVectContainerBase_size)
    swap = _swig_new_instance_method(_frameCPP.FrVectContainerBase_swap)
    begin = _swig_new_instance_method(_frameCPP.FrVectContainerBase_begin)
    end = _swig_new_instance_method(_frameCPP.FrVectContainerBase_end)
    rbegin = _swig_new_instance_method(_frameCPP.FrVectContainerBase_rbegin)
    rend = _swig_new_instance_method(_frameCPP.FrVectContainerBase_rend)
    clear = _swig_new_instance_method(_frameCPP.FrVectContainerBase_clear)
    get_allocator = _swig_new_instance_method(_frameCPP.FrVectContainerBase_get_allocator)
    pop_back = _swig_new_instance_method(_frameCPP.FrVectContainerBase_pop_back)
    erase = _swig_new_instance_method(_frameCPP.FrVectContainerBase_erase)

    def __init__(self, *args):
        r"""
        __init__(FrVectContainerBase self) -> FrVectContainerBase
        __init__(FrVectContainerBase self, FrVectContainerBase other) -> FrVectContainerBase
        __init__(FrVectContainerBase self, std::vector< boost::shared_ptr< FrVect > >::size_type size) -> FrVectContainerBase
        __init__(FrVectContainerBase self, std::vector< boost::shared_ptr< FrVect > >::size_type size, std::vector< boost::shared_ptr< FrVect > >::value_type const & value) -> FrVectContainerBase
        1
        """
        _frameCPP.FrVectContainerBase_swiginit(self, _frameCPP.new_FrVectContainerBase(*args))
    push_back = _swig_new_instance_method(_frameCPP.FrVectContainerBase_push_back)
    front = _swig_new_instance_method(_frameCPP.FrVectContainerBase_front)
    back = _swig_new_instance_method(_frameCPP.FrVectContainerBase_back)
    assign = _swig_new_instance_method(_frameCPP.FrVectContainerBase_assign)
    resize = _swig_new_instance_method(_frameCPP.FrVectContainerBase_resize)
    insert = _swig_new_instance_method(_frameCPP.FrVectContainerBase_insert)
    reserve = _swig_new_instance_method(_frameCPP.FrVectContainerBase_reserve)
    capacity = _swig_new_instance_method(_frameCPP.FrVectContainerBase_capacity)
    __swig_destroy__ = _frameCPP.delete_FrVectContainerBase

# Register FrVectContainerBase in _frameCPP:
_frameCPP.FrVectContainerBase_swigregister(FrVectContainerBase)

class FrVectContainer(FrVectContainerBase):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(FrVectContainer self) -> FrVectContainer
        1
        """
        _frameCPP.FrVectContainer_swiginit(self, _frameCPP.new_FrVectContainer())
    __swig_destroy__ = _frameCPP.delete_FrVectContainer

# Register FrVectContainer in _frameCPP:
_frameCPP.FrVectContainer_swigregister(FrVectContainer)

class FrAdcData(object):
    r"""

    FrAdcData (ADC Data) implementation of the frame specification.

      Attributes:

        name           Channel name -- must be unique with the frame
        comment        Comment
        channelNumber  Channel number
        channelGroup   Channel grouping number containing ADC
        nBits          Number of bits in A/D output
        bias           DC bias on channel (Units @ ADC counts = 0)
        slope          ADC calibration: input units/ct
        units          ADC calibration: input units for slope.
        sampleRate     Data Acquisition rate, samples/s.
        timeOffset     Offset of 1st sample relative to the frame start
                       time (seconds). Must be positive and smaller
                       than the frame length.
        fShift         fShift is the frequency (in Hz) in the origional
                       data that corresponds to 0 Hz in the heterodyned
                       series.
        phase          Phase (in radian) of heterodyning signal at
                       start of dataset.
        dataValid      Data valid flag: dataValid = 0 > ADC data valid;
                       dataValid != 0 > ADC data suspect/not valid.
        data           Identifier of rverctor of sampled data.

    1
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        FrAdcData (ADC Data) implementation of the frame specification.

          Attributes:

            name           Channel name -- must be unique with the frame
            comment        Comment
            channelNumber  Channel number
            channelGroup   Channel grouping number containing ADC
            nBits          Number of bits in A/D output
            bias           DC bias on channel (Units @ ADC counts = 0)
            slope          ADC calibration: input units/ct
            units          ADC calibration: input units for slope.
            sampleRate     Data Acquisition rate, samples/s.
            timeOffset     Offset of 1st sample relative to the frame start
                           time (seconds). Must be positive and smaller
                           than the frame length.
            fShift         fShift is the frequency (in Hz) in the origional
                           data that corresponds to 0 Hz in the heterodyned
                           series.
            phase          Phase (in radian) of heterodyning signal at
                           start of dataset.
            dataValid      Data valid flag: dataValid = 0 > ADC data valid;
                           dataValid != 0 > ADC data suspect/not valid.
            data           Identifier of rverctor of sampled data.

        FrAdcData (ADC Data) implementation of the frame specification.

          Attributes:

            name           Channel name -- must be unique with the frame
            comment        Comment
            channelNumber  Channel number
            channelGroup   Channel grouping number containing ADC
            nBits          Number of bits in A/D output
            bias           DC bias on channel (Units @ ADC counts = 0)
            slope          ADC calibration: input units/ct
            units          ADC calibration: input units for slope.
            sampleRate     Data Acquisition rate, samples/s.
            timeOffset     Offset of 1st sample relative to the frame start
                           time (seconds). Must be positive and smaller
                           than the frame length.
            fShift         fShift is the frequency (in Hz) in the origional
                           data that corresponds to 0 Hz in the heterodyned
                           series.
            phase          Phase (in radian) of heterodyning signal at
                           start of dataset.
            dataValid      Data valid flag: dataValid = 0 > ADC data valid;
                           dataValid != 0 > ADC data suspect/not valid.
            data           Identifier of rverctor of sampled data.

        1
        """
        _frameCPP.FrAdcData_swiginit(self, _frameCPP.new_FrAdcData(*args))
    GetName = _swig_new_instance_method(_frameCPP.FrAdcData_GetName)
    GetComment = _swig_new_instance_method(_frameCPP.FrAdcData_GetComment)
    GetChannelNumber = _swig_new_instance_method(_frameCPP.FrAdcData_GetChannelNumber)
    GetChannelGroup = _swig_new_instance_method(_frameCPP.FrAdcData_GetChannelGroup)
    GetNBits = _swig_new_instance_method(_frameCPP.FrAdcData_GetNBits)
    GetBias = _swig_new_instance_method(_frameCPP.FrAdcData_GetBias)
    GetSlope = _swig_new_instance_method(_frameCPP.FrAdcData_GetSlope)
    GetUnits = _swig_new_instance_method(_frameCPP.FrAdcData_GetUnits)
    GetSampleRate = _swig_new_instance_method(_frameCPP.FrAdcData_GetSampleRate)
    GetTimeOffset = _swig_new_instance_method(_frameCPP.FrAdcData_GetTimeOffset)
    GetFShift = _swig_new_instance_method(_frameCPP.FrAdcData_GetFShift)
    GetPhase = _swig_new_instance_method(_frameCPP.FrAdcData_GetPhase)
    GetDataValid = _swig_new_instance_method(_frameCPP.FrAdcData_GetDataValid)
    SetComment = _swig_new_instance_method(_frameCPP.FrAdcData_SetComment)
    SetChannelGroup = _swig_new_instance_method(_frameCPP.FrAdcData_SetChannelGroup)
    SetChannelNumber = _swig_new_instance_method(_frameCPP.FrAdcData_SetChannelNumber)
    SetDataValid = _swig_new_instance_method(_frameCPP.FrAdcData_SetDataValid)
    SetSampleRate = _swig_new_instance_method(_frameCPP.FrAdcData_SetSampleRate)
    SetTimeOffset = _swig_new_instance_method(_frameCPP.FrAdcData_SetTimeOffset)
    AppendData = _swig_new_instance_method(_frameCPP.FrAdcData_AppendData)
    RefDataSize = _swig_new_instance_method(_frameCPP.FrAdcData_RefDataSize)
    RefData = _swig_new_instance_method(_frameCPP.FrAdcData_RefData)
    name = property(_frameCPP.FrAdcData_name_get, doc=r"""
    name : r.q(const).std::string
    1
    """)
    comment = property(_frameCPP.FrAdcData_comment_get, doc=r"""
    comment : r.q(const).std::string
    1
    """)
    channelNumber = property(_frameCPP.FrAdcData_channelNumber_get, _frameCPP.FrAdcData_channelNumber_set, doc=r"""
    channelNumber : FrAdcData::channelNumber_type
    1
    """)
    channelGroup = property(_frameCPP.FrAdcData_channelGroup_get, _frameCPP.FrAdcData_channelGroup_set, doc=r"""
    channelGroup : FrAdcData::channelGroup_type
    1
    """)
    nBits = property(_frameCPP.FrAdcData_nBits_get, doc=r"""
    nBits : FrAdcData::nBits_type
    1
    """)
    bias = property(_frameCPP.FrAdcData_bias_get, doc=r"""
    bias : FrAdcData::bias_type
    1
    """)
    slope = property(_frameCPP.FrAdcData_slope_get, doc=r"""
    slope : FrAdcData::slope_type
    1
    """)
    units = property(_frameCPP.FrAdcData_units_get, doc=r"""
    units : r.q(const).std::string
    1
    """)
    sampleRate = property(_frameCPP.FrAdcData_sampleRate_get, _frameCPP.FrAdcData_sampleRate_set, doc=r"""
    sampleRate : FrAdcData::sampleRate_type
    1
    """)
    timeOffset = property(_frameCPP.FrAdcData_timeOffset_get, _frameCPP.FrAdcData_timeOffset_set, doc=r"""
    timeOffset : FrAdcData::timeOffset_type
    1
    """)
    fShift = property(_frameCPP.FrAdcData_fShift_get, doc=r"""
    fShift : FrAdcData::fShift_type
    1
    """)
    phase = property(_frameCPP.FrAdcData_phase_get, doc=r"""
    phase : FrAdcData::phase_type
    1
    """)
    dataValid = property(_frameCPP.FrAdcData_dataValid_get, _frameCPP.FrAdcData_dataValid_set, doc=r"""
    dataValid : FrAdcData::dataValid_type
    1
    """)
    data = property(_frameCPP.FrAdcData_data_get, doc=r"""
    data : r.FrAdcData::data_type
    1
    """)
    __swig_destroy__ = _frameCPP.delete_FrAdcData

# Register FrAdcData in _frameCPP:
_frameCPP.FrAdcData_swigregister(FrAdcData)

class FrAdcDataContainerBase(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_frameCPP.FrAdcDataContainerBase_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_frameCPP.FrAdcDataContainerBase___nonzero__)
    __bool__ = _swig_new_instance_method(_frameCPP.FrAdcDataContainerBase___bool__)
    __len__ = _swig_new_instance_method(_frameCPP.FrAdcDataContainerBase___len__)
    __getslice__ = _swig_new_instance_method(_frameCPP.FrAdcDataContainerBase___getslice__)
    __setslice__ = _swig_new_instance_method(_frameCPP.FrAdcDataContainerBase___setslice__)
    __delslice__ = _swig_new_instance_method(_frameCPP.FrAdcDataContainerBase___delslice__)
    __delitem__ = _swig_new_instance_method(_frameCPP.FrAdcDataContainerBase___delitem__)
    __getitem__ = _swig_new_instance_method(_frameCPP.FrAdcDataContainerBase___getitem__)
    __setitem__ = _swig_new_instance_method(_frameCPP.FrAdcDataContainerBase___setitem__)
    pop = _swig_new_instance_method(_frameCPP.FrAdcDataContainerBase_pop)
    append = _swig_new_instance_method(_frameCPP.FrAdcDataContainerBase_append)
    empty = _swig_new_instance_method(_frameCPP.FrAdcDataContainerBase_empty)
    size = _swig_new_instance_method(_frameCPP.FrAdcDataContainerBase_size)
    swap = _swig_new_instance_method(_frameCPP.FrAdcDataContainerBase_swap)
    begin = _swig_new_instance_method(_frameCPP.FrAdcDataContainerBase_begin)
    end = _swig_new_instance_method(_frameCPP.FrAdcDataContainerBase_end)
    rbegin = _swig_new_instance_method(_frameCPP.FrAdcDataContainerBase_rbegin)
    rend = _swig_new_instance_method(_frameCPP.FrAdcDataContainerBase_rend)
    clear = _swig_new_instance_method(_frameCPP.FrAdcDataContainerBase_clear)
    get_allocator = _swig_new_instance_method(_frameCPP.FrAdcDataContainerBase_get_allocator)
    pop_back = _swig_new_instance_method(_frameCPP.FrAdcDataContainerBase_pop_back)
    erase = _swig_new_instance_method(_frameCPP.FrAdcDataContainerBase_erase)

    def __init__(self, *args):
        r"""
        __init__(FrAdcDataContainerBase self) -> FrAdcDataContainerBase
        __init__(FrAdcDataContainerBase self, FrAdcDataContainerBase other) -> FrAdcDataContainerBase
        __init__(FrAdcDataContainerBase self, std::vector< boost::shared_ptr< FrAdcData > >::size_type size) -> FrAdcDataContainerBase
        __init__(FrAdcDataContainerBase self, std::vector< boost::shared_ptr< FrAdcData > >::size_type size, std::vector< boost::shared_ptr< FrAdcData > >::value_type const & value) -> FrAdcDataContainerBase
        1
        """
        _frameCPP.FrAdcDataContainerBase_swiginit(self, _frameCPP.new_FrAdcDataContainerBase(*args))
    push_back = _swig_new_instance_method(_frameCPP.FrAdcDataContainerBase_push_back)
    front = _swig_new_instance_method(_frameCPP.FrAdcDataContainerBase_front)
    back = _swig_new_instance_method(_frameCPP.FrAdcDataContainerBase_back)
    assign = _swig_new_instance_method(_frameCPP.FrAdcDataContainerBase_assign)
    resize = _swig_new_instance_method(_frameCPP.FrAdcDataContainerBase_resize)
    insert = _swig_new_instance_method(_frameCPP.FrAdcDataContainerBase_insert)
    reserve = _swig_new_instance_method(_frameCPP.FrAdcDataContainerBase_reserve)
    capacity = _swig_new_instance_method(_frameCPP.FrAdcDataContainerBase_capacity)
    __swig_destroy__ = _frameCPP.delete_FrAdcDataContainerBase

# Register FrAdcDataContainerBase in _frameCPP:
_frameCPP.FrAdcDataContainerBase_swigregister(FrAdcDataContainerBase)

class FrAdcDataContainer(FrAdcDataContainerBase):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(FrAdcDataContainer self) -> FrAdcDataContainer
        1
        """
        _frameCPP.FrAdcDataContainer_swiginit(self, _frameCPP.new_FrAdcDataContainer())
    __swig_destroy__ = _frameCPP.delete_FrAdcDataContainer

# Register FrAdcDataContainer in _frameCPP:
_frameCPP.FrAdcDataContainer_swigregister(FrAdcDataContainer)

class FrDetector(object):
    r"""

    FrDetector (Detector Data) implementation of the frame specification.

      Attributes:

        name          Instrument name as described in the appendix
                      of the current frame specification document.
        prefix        Channel prefix for this detector as described in
                      the frame specification appendix.
        longitude     Detector vertex longitude, geographical coordinates:
                      radians; Value > 0 => E of Greenwich
        lattiude      Detector vertex latitude, geographical coordinates:
                      radians; Value > 0 => N of Equator
        elevation     Vertex elevation, meters, relative to WGS84 elipsoid.
        armXazimuth   Orientation of X arm, measured in radians Eas of North
                      (0<= Arm X azimuth < 2pi)
        armYazimuth   Orientation of Y arm, measured in radians Eas of North
                      (0<= Arm Y azimuth < 2pi)
        armXaltitude  Altitude (pitch) angle of X arm, measured in radians
                      above horizon (local tangent to WGS84 ellipsoid).
        armYaltitude  Altitude (pitch) angle of Y arm, measured in radians
                      above horizon (local tangent to WGS84 ellipsoid).
        armXmidpoint  Distance between the detector vertex and the middle
                      of the X cavity (meters) (should be zero for bars)
        armYmidpoint  Distance between the detector vertex and the middle
                      of the Y cavity (meters) (should be zero for bars)
        localTime     Local seasonal time - UTC in seconds. If
                      localTime % 1800 != 0, then localTime is undefined.

    1
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        FrDetector (Detector Data) implementation of the frame specification.

          Attributes:

            name          Instrument name as described in the appendix
                          of the current frame specification document.
            prefix        Channel prefix for this detector as described in
                          the frame specification appendix.
            longitude     Detector vertex longitude, geographical coordinates:
                          radians; Value > 0 => E of Greenwich
            lattiude      Detector vertex latitude, geographical coordinates:
                          radians; Value > 0 => N of Equator
            elevation     Vertex elevation, meters, relative to WGS84 elipsoid.
            armXazimuth   Orientation of X arm, measured in radians Eas of North
                          (0<= Arm X azimuth < 2pi)
            armYazimuth   Orientation of Y arm, measured in radians Eas of North
                          (0<= Arm Y azimuth < 2pi)
            armXaltitude  Altitude (pitch) angle of X arm, measured in radians
                          above horizon (local tangent to WGS84 ellipsoid).
            armYaltitude  Altitude (pitch) angle of Y arm, measured in radians
                          above horizon (local tangent to WGS84 ellipsoid).
            armXmidpoint  Distance between the detector vertex and the middle
                          of the X cavity (meters) (should be zero for bars)
            armYmidpoint  Distance between the detector vertex and the middle
                          of the Y cavity (meters) (should be zero for bars)
            localTime     Local seasonal time - UTC in seconds. If
                          localTime % 1800 != 0, then localTime is undefined.

        FrDetector (Detector Data) implementation of the frame specification.

          Attributes:

            name          Instrument name as described in the appendix
                          of the current frame specification document.
            prefix        Channel prefix for this detector as described in
                          the frame specification appendix.
            longitude     Detector vertex longitude, geographical coordinates:
                          radians; Value > 0 => E of Greenwich
            lattiude      Detector vertex latitude, geographical coordinates:
                          radians; Value > 0 => N of Equator
            elevation     Vertex elevation, meters, relative to WGS84 elipsoid.
            armXazimuth   Orientation of X arm, measured in radians Eas of North
                          (0<= Arm X azimuth < 2pi)
            armYazimuth   Orientation of Y arm, measured in radians Eas of North
                          (0<= Arm Y azimuth < 2pi)
            armXaltitude  Altitude (pitch) angle of X arm, measured in radians
                          above horizon (local tangent to WGS84 ellipsoid).
            armYaltitude  Altitude (pitch) angle of Y arm, measured in radians
                          above horizon (local tangent to WGS84 ellipsoid).
            armXmidpoint  Distance between the detector vertex and the middle
                          of the X cavity (meters) (should be zero for bars)
            armYmidpoint  Distance between the detector vertex and the middle
                          of the Y cavity (meters) (should be zero for bars)
            localTime     Local seasonal time - UTC in seconds. If
                          localTime % 1800 != 0, then localTime is undefined.

        1
        """
        _frameCPP.FrDetector_swiginit(self, _frameCPP.new_FrDetector(*args))
    GetName = _swig_new_instance_method(_frameCPP.FrDetector_GetName)
    GetPrefix = _swig_new_instance_method(_frameCPP.FrDetector_GetPrefix)
    GetLongitude = _swig_new_instance_method(_frameCPP.FrDetector_GetLongitude)
    GetLatitude = _swig_new_instance_method(_frameCPP.FrDetector_GetLatitude)
    GetElevation = _swig_new_instance_method(_frameCPP.FrDetector_GetElevation)
    GetArmXazimuth = _swig_new_instance_method(_frameCPP.FrDetector_GetArmXazimuth)
    GetArmYazimuth = _swig_new_instance_method(_frameCPP.FrDetector_GetArmYazimuth)
    GetArmXaltitude = _swig_new_instance_method(_frameCPP.FrDetector_GetArmXaltitude)
    GetArmYaltitude = _swig_new_instance_method(_frameCPP.FrDetector_GetArmYaltitude)
    GetArmXmidpoint = _swig_new_instance_method(_frameCPP.FrDetector_GetArmXmidpoint)
    GetArmYmidpoint = _swig_new_instance_method(_frameCPP.FrDetector_GetArmYmidpoint)
    GetLocalTime = _swig_new_instance_method(_frameCPP.FrDetector_GetLocalTime)
    name = property(_frameCPP.FrDetector_name_get, doc=r"""
    name : r.q(const).std::string
    1
    """)
    prefix = property(_frameCPP.FrDetector_prefix_get, doc=r"""
    prefix : p.q(const).CHAR
    1
    """)
    longitude = property(_frameCPP.FrDetector_longitude_get, doc=r"""
    longitude : FrDetector::longitude_type
    1
    """)
    latitude = property(_frameCPP.FrDetector_latitude_get, doc=r"""
    latitude : FrDetector::latitude_type
    1
    """)
    elevation = property(_frameCPP.FrDetector_elevation_get, doc=r"""
    elevation : FrDetector::elevation_type
    1
    """)
    armXazimuth = property(_frameCPP.FrDetector_armXazimuth_get, doc=r"""
    armXazimuth : FrDetector::armXazimuth_type
    1
    """)
    armYazimuth = property(_frameCPP.FrDetector_armYazimuth_get, doc=r"""
    armYazimuth : FrDetector::armYazimuth_type
    1
    """)
    armXaltitude = property(_frameCPP.FrDetector_armXaltitude_get, doc=r"""
    armXaltitude : FrDetector::armXaltitude_type
    1
    """)
    armYaltitude = property(_frameCPP.FrDetector_armYaltitude_get, doc=r"""
    armYaltitude : FrDetector::armYaltitude_type
    1
    """)
    armXmidpoint = property(_frameCPP.FrDetector_armXmidpoint_get, doc=r"""
    armXmidpoint : FrDetector::armXmidpoint_type
    1
    """)
    armYmidpoint = property(_frameCPP.FrDetector_armYmidpoint_get, doc=r"""
    armYmidpoint : FrDetector::armYmidpoint_type
    1
    """)
    localTime = property(_frameCPP.FrDetector_localTime_get, doc=r"""
    localTime : FrDetector::localTime_type
    1
    """)
    __swig_destroy__ = _frameCPP.delete_FrDetector

# Register FrDetector in _frameCPP:
_frameCPP.FrDetector_swigregister(FrDetector)

class FrDetectorContainerBase(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_frameCPP.FrDetectorContainerBase_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_frameCPP.FrDetectorContainerBase___nonzero__)
    __bool__ = _swig_new_instance_method(_frameCPP.FrDetectorContainerBase___bool__)
    __len__ = _swig_new_instance_method(_frameCPP.FrDetectorContainerBase___len__)
    __getslice__ = _swig_new_instance_method(_frameCPP.FrDetectorContainerBase___getslice__)
    __setslice__ = _swig_new_instance_method(_frameCPP.FrDetectorContainerBase___setslice__)
    __delslice__ = _swig_new_instance_method(_frameCPP.FrDetectorContainerBase___delslice__)
    __delitem__ = _swig_new_instance_method(_frameCPP.FrDetectorContainerBase___delitem__)
    __getitem__ = _swig_new_instance_method(_frameCPP.FrDetectorContainerBase___getitem__)
    __setitem__ = _swig_new_instance_method(_frameCPP.FrDetectorContainerBase___setitem__)
    pop = _swig_new_instance_method(_frameCPP.FrDetectorContainerBase_pop)
    append = _swig_new_instance_method(_frameCPP.FrDetectorContainerBase_append)
    empty = _swig_new_instance_method(_frameCPP.FrDetectorContainerBase_empty)
    size = _swig_new_instance_method(_frameCPP.FrDetectorContainerBase_size)
    swap = _swig_new_instance_method(_frameCPP.FrDetectorContainerBase_swap)
    begin = _swig_new_instance_method(_frameCPP.FrDetectorContainerBase_begin)
    end = _swig_new_instance_method(_frameCPP.FrDetectorContainerBase_end)
    rbegin = _swig_new_instance_method(_frameCPP.FrDetectorContainerBase_rbegin)
    rend = _swig_new_instance_method(_frameCPP.FrDetectorContainerBase_rend)
    clear = _swig_new_instance_method(_frameCPP.FrDetectorContainerBase_clear)
    get_allocator = _swig_new_instance_method(_frameCPP.FrDetectorContainerBase_get_allocator)
    pop_back = _swig_new_instance_method(_frameCPP.FrDetectorContainerBase_pop_back)
    erase = _swig_new_instance_method(_frameCPP.FrDetectorContainerBase_erase)

    def __init__(self, *args):
        r"""
        __init__(FrDetectorContainerBase self) -> FrDetectorContainerBase
        __init__(FrDetectorContainerBase self, FrDetectorContainerBase other) -> FrDetectorContainerBase
        __init__(FrDetectorContainerBase self, std::vector< boost::shared_ptr< FrDetector > >::size_type size) -> FrDetectorContainerBase
        __init__(FrDetectorContainerBase self, std::vector< boost::shared_ptr< FrDetector > >::size_type size, std::vector< boost::shared_ptr< FrDetector > >::value_type const & value) -> FrDetectorContainerBase
        1
        """
        _frameCPP.FrDetectorContainerBase_swiginit(self, _frameCPP.new_FrDetectorContainerBase(*args))
    push_back = _swig_new_instance_method(_frameCPP.FrDetectorContainerBase_push_back)
    front = _swig_new_instance_method(_frameCPP.FrDetectorContainerBase_front)
    back = _swig_new_instance_method(_frameCPP.FrDetectorContainerBase_back)
    assign = _swig_new_instance_method(_frameCPP.FrDetectorContainerBase_assign)
    resize = _swig_new_instance_method(_frameCPP.FrDetectorContainerBase_resize)
    insert = _swig_new_instance_method(_frameCPP.FrDetectorContainerBase_insert)
    reserve = _swig_new_instance_method(_frameCPP.FrDetectorContainerBase_reserve)
    capacity = _swig_new_instance_method(_frameCPP.FrDetectorContainerBase_capacity)
    __swig_destroy__ = _frameCPP.delete_FrDetectorContainerBase

# Register FrDetectorContainerBase in _frameCPP:
_frameCPP.FrDetectorContainerBase_swigregister(FrDetectorContainerBase)

class FrDetectorContainer(FrDetectorContainerBase):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(FrDetectorContainer self) -> FrDetectorContainer
        1
        """
        _frameCPP.FrDetectorContainer_swiginit(self, _frameCPP.new_FrDetectorContainer())
    __swig_destroy__ = _frameCPP.delete_FrDetectorContainer

# Register FrDetectorContainer in _frameCPP:
_frameCPP.FrDetectorContainer_swigregister(FrDetectorContainer)

class FrDetectorSearchContainer(FrDetectorContainer):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(FrDetectorSearchContainer self) -> FrDetectorSearchContainer
        1
        """
        _frameCPP.FrDetectorSearchContainer_swiginit(self, _frameCPP.new_FrDetectorSearchContainer())
    __swig_destroy__ = _frameCPP.delete_FrDetectorSearchContainer

# Register FrDetectorSearchContainer in _frameCPP:
_frameCPP.FrDetectorSearchContainer_swigregister(FrDetectorSearchContainer)

class FrEvent(object):
    r"""

    FrEvent (Event) implementation of the frame specification.

      Attributes:

        name         Name of event.
        comment      Description of event.
        inputs       Input channels and filter parameters to event
                     process.
        GTime        GPS time corresponiding to reference value of
                     event, as defined by the search algorithm.
        timeBefore   Signal duration before (seconds).
        timeAfter    Signal duration after (seconds).
        eventStatus  Defined by event search algorithm.
        amplitude    Continuous output amplitude returned by event.
        probability  Likelihood estimate of event, if available
                     (probability = -1 if cannot be estimated).
        statistics   Statistical description of event, if relevant
                     or available.
        params       Array of additional event parameters.

    1
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        FrEvent (Event) implementation of the frame specification.

          Attributes:

            name         Name of event.
            comment      Description of event.
            inputs       Input channels and filter parameters to event
                         process.
            GTime        GPS time corresponiding to reference value of
                         event, as defined by the search algorithm.
            timeBefore   Signal duration before (seconds).
            timeAfter    Signal duration after (seconds).
            eventStatus  Defined by event search algorithm.
            amplitude    Continuous output amplitude returned by event.
            probability  Likelihood estimate of event, if available
                         (probability = -1 if cannot be estimated).
            statistics   Statistical description of event, if relevant
                         or available.
            params       Array of additional event parameters.

        FrEvent (Event) implementation of the frame specification.

          Attributes:

            name         Name of event.
            comment      Description of event.
            inputs       Input channels and filter parameters to event
                         process.
            GTime        GPS time corresponiding to reference value of
                         event, as defined by the search algorithm.
            timeBefore   Signal duration before (seconds).
            timeAfter    Signal duration after (seconds).
            eventStatus  Defined by event search algorithm.
            amplitude    Continuous output amplitude returned by event.
            probability  Likelihood estimate of event, if available
                         (probability = -1 if cannot be estimated).
            statistics   Statistical description of event, if relevant
                         or available.
            params       Array of additional event parameters.

        1
        """
        _frameCPP.FrEvent_swiginit(self, _frameCPP.new_FrEvent(*args))
    GetName = _swig_new_instance_method(_frameCPP.FrEvent_GetName)
    GetComment = _swig_new_instance_method(_frameCPP.FrEvent_GetComment)
    GetInputs = _swig_new_instance_method(_frameCPP.FrEvent_GetInputs)
    GetGTime = _swig_new_instance_method(_frameCPP.FrEvent_GetGTime)
    GetTimeBefore = _swig_new_instance_method(_frameCPP.FrEvent_GetTimeBefore)
    GetTimeAfter = _swig_new_instance_method(_frameCPP.FrEvent_GetTimeAfter)
    GetEventStatus = _swig_new_instance_method(_frameCPP.FrEvent_GetEventStatus)
    GetAmplitude = _swig_new_instance_method(_frameCPP.FrEvent_GetAmplitude)
    GetProbability = _swig_new_instance_method(_frameCPP.FrEvent_GetProbability)
    GetStatistics = _swig_new_instance_method(_frameCPP.FrEvent_GetStatistics)
    GetParam = _swig_new_instance_method(_frameCPP.FrEvent_GetParam)
    name = property(_frameCPP.FrEvent_name_get, doc=r"""
    name : r.q(const).FrEvent::name_type
    1
    """)
    comment = property(_frameCPP.FrEvent_comment_get, doc=r"""
    comment : r.q(const).FrEvent::comment_type
    1
    """)
    inputs = property(_frameCPP.FrEvent_inputs_get, doc=r"""
    inputs : r.q(const).FrEvent::inputs_type
    1
    """)
    GTime = property(_frameCPP.FrEvent_GTime_get, doc=r"""
    GTime : r.q(const).FrEvent::time_type
    1
    """)
    timeBefore = property(_frameCPP.FrEvent_timeBefore_get, doc=r"""
    timeBefore : FrEvent::timeBefore_type
    1
    """)
    timeAfter = property(_frameCPP.FrEvent_timeAfter_get, doc=r"""
    timeAfter : FrEvent::timeAfter_type
    1
    """)
    eventStatus = property(_frameCPP.FrEvent_eventStatus_get, doc=r"""
    eventStatus : FrEvent::eventStatus_type
    1
    """)
    amplitude = property(_frameCPP.FrEvent_amplitude_get, doc=r"""
    amplitude : FrEvent::amplitude_type
    1
    """)
    probability = property(_frameCPP.FrEvent_probability_get, doc=r"""
    probability : FrEvent::probability_type
    1
    """)
    statistics = property(_frameCPP.FrEvent_statistics_get, doc=r"""
    statistics : r.q(const).FrEvent::statistics_type
    1
    """)
    params = property(_frameCPP.FrEvent_params_get, doc=r"""
    params : r.q(const).Parameters_type
    1
    """)
    __swig_destroy__ = _frameCPP.delete_FrEvent

# Register FrEvent in _frameCPP:
_frameCPP.FrEvent_swigregister(FrEvent)

class FrEventContainerBase(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_frameCPP.FrEventContainerBase_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_frameCPP.FrEventContainerBase___nonzero__)
    __bool__ = _swig_new_instance_method(_frameCPP.FrEventContainerBase___bool__)
    __len__ = _swig_new_instance_method(_frameCPP.FrEventContainerBase___len__)
    __getslice__ = _swig_new_instance_method(_frameCPP.FrEventContainerBase___getslice__)
    __setslice__ = _swig_new_instance_method(_frameCPP.FrEventContainerBase___setslice__)
    __delslice__ = _swig_new_instance_method(_frameCPP.FrEventContainerBase___delslice__)
    __delitem__ = _swig_new_instance_method(_frameCPP.FrEventContainerBase___delitem__)
    __getitem__ = _swig_new_instance_method(_frameCPP.FrEventContainerBase___getitem__)
    __setitem__ = _swig_new_instance_method(_frameCPP.FrEventContainerBase___setitem__)
    pop = _swig_new_instance_method(_frameCPP.FrEventContainerBase_pop)
    append = _swig_new_instance_method(_frameCPP.FrEventContainerBase_append)
    empty = _swig_new_instance_method(_frameCPP.FrEventContainerBase_empty)
    size = _swig_new_instance_method(_frameCPP.FrEventContainerBase_size)
    swap = _swig_new_instance_method(_frameCPP.FrEventContainerBase_swap)
    begin = _swig_new_instance_method(_frameCPP.FrEventContainerBase_begin)
    end = _swig_new_instance_method(_frameCPP.FrEventContainerBase_end)
    rbegin = _swig_new_instance_method(_frameCPP.FrEventContainerBase_rbegin)
    rend = _swig_new_instance_method(_frameCPP.FrEventContainerBase_rend)
    clear = _swig_new_instance_method(_frameCPP.FrEventContainerBase_clear)
    get_allocator = _swig_new_instance_method(_frameCPP.FrEventContainerBase_get_allocator)
    pop_back = _swig_new_instance_method(_frameCPP.FrEventContainerBase_pop_back)
    erase = _swig_new_instance_method(_frameCPP.FrEventContainerBase_erase)

    def __init__(self, *args):
        r"""
        __init__(FrEventContainerBase self) -> FrEventContainerBase
        __init__(FrEventContainerBase self, FrEventContainerBase other) -> FrEventContainerBase
        __init__(FrEventContainerBase self, std::vector< boost::shared_ptr< FrEvent > >::size_type size) -> FrEventContainerBase
        __init__(FrEventContainerBase self, std::vector< boost::shared_ptr< FrEvent > >::size_type size, std::vector< boost::shared_ptr< FrEvent > >::value_type const & value) -> FrEventContainerBase
        1
        """
        _frameCPP.FrEventContainerBase_swiginit(self, _frameCPP.new_FrEventContainerBase(*args))
    push_back = _swig_new_instance_method(_frameCPP.FrEventContainerBase_push_back)
    front = _swig_new_instance_method(_frameCPP.FrEventContainerBase_front)
    back = _swig_new_instance_method(_frameCPP.FrEventContainerBase_back)
    assign = _swig_new_instance_method(_frameCPP.FrEventContainerBase_assign)
    resize = _swig_new_instance_method(_frameCPP.FrEventContainerBase_resize)
    insert = _swig_new_instance_method(_frameCPP.FrEventContainerBase_insert)
    reserve = _swig_new_instance_method(_frameCPP.FrEventContainerBase_reserve)
    capacity = _swig_new_instance_method(_frameCPP.FrEventContainerBase_capacity)
    __swig_destroy__ = _frameCPP.delete_FrEventContainerBase

# Register FrEventContainerBase in _frameCPP:
_frameCPP.FrEventContainerBase_swigregister(FrEventContainerBase)

class FrEventContainer(FrEventContainerBase):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(FrEventContainer self) -> FrEventContainer
        1
        """
        _frameCPP.FrEventContainer_swiginit(self, _frameCPP.new_FrEventContainer())
    __swig_destroy__ = _frameCPP.delete_FrEventContainer

# Register FrEventContainer in _frameCPP:
_frameCPP.FrEventContainer_swigregister(FrEventContainer)

class FrHistory(object):
    r"""

    FrHistory (History Data) implementation of the frame specification.

      Attributes:

        name     Name of history record. NOTE: When a FrHistory is linked
                 to an FrProcData, its name variable must be the FrProcData
                 channel name.
        comment  Program name and relevant comments needed to
                 define post-processing.


    1
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        FrHistory (History Data) implementation of the frame specification.

          Attributes:

            name     Name of history record. NOTE: When a FrHistory is linked
                     to an FrProcData, its name variable must be the FrProcData
                     channel name.
            comment  Program name and relevant comments needed to
                     define post-processing.


        FrHistory (History Data) implementation of the frame specification.

          Attributes:

            name     Name of history record. NOTE: When a FrHistory is linked
                     to an FrProcData, its name variable must be the FrProcData
                     channel name.
            comment  Program name and relevant comments needed to
                     define post-processing.


        1
        """
        _frameCPP.FrHistory_swiginit(self, _frameCPP.new_FrHistory(*args))
    GetName = _swig_new_instance_method(_frameCPP.FrHistory_GetName)
    GetComment = _swig_new_instance_method(_frameCPP.FrHistory_GetComment)
    name = property(_frameCPP.FrHistory_name_get, doc=r"""
    name : r.q(const).std::string
    1
    """)
    comment = property(_frameCPP.FrHistory_comment_get, doc=r"""
    comment : r.q(const).std::string
    1
    """)
    __swig_destroy__ = _frameCPP.delete_FrHistory

# Register FrHistory in _frameCPP:
_frameCPP.FrHistory_swigregister(FrHistory)

class FrHistoryContainerBase(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_frameCPP.FrHistoryContainerBase_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_frameCPP.FrHistoryContainerBase___nonzero__)
    __bool__ = _swig_new_instance_method(_frameCPP.FrHistoryContainerBase___bool__)
    __len__ = _swig_new_instance_method(_frameCPP.FrHistoryContainerBase___len__)
    __getslice__ = _swig_new_instance_method(_frameCPP.FrHistoryContainerBase___getslice__)
    __setslice__ = _swig_new_instance_method(_frameCPP.FrHistoryContainerBase___setslice__)
    __delslice__ = _swig_new_instance_method(_frameCPP.FrHistoryContainerBase___delslice__)
    __delitem__ = _swig_new_instance_method(_frameCPP.FrHistoryContainerBase___delitem__)
    __getitem__ = _swig_new_instance_method(_frameCPP.FrHistoryContainerBase___getitem__)
    __setitem__ = _swig_new_instance_method(_frameCPP.FrHistoryContainerBase___setitem__)
    pop = _swig_new_instance_method(_frameCPP.FrHistoryContainerBase_pop)
    append = _swig_new_instance_method(_frameCPP.FrHistoryContainerBase_append)
    empty = _swig_new_instance_method(_frameCPP.FrHistoryContainerBase_empty)
    size = _swig_new_instance_method(_frameCPP.FrHistoryContainerBase_size)
    swap = _swig_new_instance_method(_frameCPP.FrHistoryContainerBase_swap)
    begin = _swig_new_instance_method(_frameCPP.FrHistoryContainerBase_begin)
    end = _swig_new_instance_method(_frameCPP.FrHistoryContainerBase_end)
    rbegin = _swig_new_instance_method(_frameCPP.FrHistoryContainerBase_rbegin)
    rend = _swig_new_instance_method(_frameCPP.FrHistoryContainerBase_rend)
    clear = _swig_new_instance_method(_frameCPP.FrHistoryContainerBase_clear)
    get_allocator = _swig_new_instance_method(_frameCPP.FrHistoryContainerBase_get_allocator)
    pop_back = _swig_new_instance_method(_frameCPP.FrHistoryContainerBase_pop_back)
    erase = _swig_new_instance_method(_frameCPP.FrHistoryContainerBase_erase)

    def __init__(self, *args):
        r"""
        __init__(FrHistoryContainerBase self) -> FrHistoryContainerBase
        __init__(FrHistoryContainerBase self, FrHistoryContainerBase other) -> FrHistoryContainerBase
        __init__(FrHistoryContainerBase self, std::vector< boost::shared_ptr< FrHistory > >::size_type size) -> FrHistoryContainerBase
        __init__(FrHistoryContainerBase self, std::vector< boost::shared_ptr< FrHistory > >::size_type size, std::vector< boost::shared_ptr< FrHistory > >::value_type const & value) -> FrHistoryContainerBase
        1
        """
        _frameCPP.FrHistoryContainerBase_swiginit(self, _frameCPP.new_FrHistoryContainerBase(*args))
    push_back = _swig_new_instance_method(_frameCPP.FrHistoryContainerBase_push_back)
    front = _swig_new_instance_method(_frameCPP.FrHistoryContainerBase_front)
    back = _swig_new_instance_method(_frameCPP.FrHistoryContainerBase_back)
    assign = _swig_new_instance_method(_frameCPP.FrHistoryContainerBase_assign)
    resize = _swig_new_instance_method(_frameCPP.FrHistoryContainerBase_resize)
    insert = _swig_new_instance_method(_frameCPP.FrHistoryContainerBase_insert)
    reserve = _swig_new_instance_method(_frameCPP.FrHistoryContainerBase_reserve)
    capacity = _swig_new_instance_method(_frameCPP.FrHistoryContainerBase_capacity)
    __swig_destroy__ = _frameCPP.delete_FrHistoryContainerBase

# Register FrHistoryContainerBase in _frameCPP:
_frameCPP.FrHistoryContainerBase_swigregister(FrHistoryContainerBase)

class FrHistoryContainer(FrHistoryContainerBase):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(FrHistoryContainer self) -> FrHistoryContainer
        1
        """
        _frameCPP.FrHistoryContainer_swiginit(self, _frameCPP.new_FrHistoryContainer())
    __swig_destroy__ = _frameCPP.delete_FrHistoryContainer

# Register FrHistoryContainer in _frameCPP:
_frameCPP.FrHistoryContainer_swigregister(FrHistoryContainer)

class AuxParam_type(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(AuxParam_type self) -> AuxParam_type
        1
        """
        _frameCPP.AuxParam_type_swiginit(self, _frameCPP.new_AuxParam_type())
    __swig_destroy__ = _frameCPP.delete_AuxParam_type

# Register AuxParam_type in _frameCPP:
_frameCPP.AuxParam_type_swigregister(AuxParam_type)

class AuxParameters_type(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_frameCPP.AuxParameters_type_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_frameCPP.AuxParameters_type___nonzero__)
    __bool__ = _swig_new_instance_method(_frameCPP.AuxParameters_type___bool__)
    __len__ = _swig_new_instance_method(_frameCPP.AuxParameters_type___len__)
    __getslice__ = _swig_new_instance_method(_frameCPP.AuxParameters_type___getslice__)
    __setslice__ = _swig_new_instance_method(_frameCPP.AuxParameters_type___setslice__)
    __delslice__ = _swig_new_instance_method(_frameCPP.AuxParameters_type___delslice__)
    __delitem__ = _swig_new_instance_method(_frameCPP.AuxParameters_type___delitem__)
    __getitem__ = _swig_new_instance_method(_frameCPP.AuxParameters_type___getitem__)
    __setitem__ = _swig_new_instance_method(_frameCPP.AuxParameters_type___setitem__)
    pop = _swig_new_instance_method(_frameCPP.AuxParameters_type_pop)
    append = _swig_new_instance_method(_frameCPP.AuxParameters_type_append)
    empty = _swig_new_instance_method(_frameCPP.AuxParameters_type_empty)
    size = _swig_new_instance_method(_frameCPP.AuxParameters_type_size)
    swap = _swig_new_instance_method(_frameCPP.AuxParameters_type_swap)
    begin = _swig_new_instance_method(_frameCPP.AuxParameters_type_begin)
    end = _swig_new_instance_method(_frameCPP.AuxParameters_type_end)
    rbegin = _swig_new_instance_method(_frameCPP.AuxParameters_type_rbegin)
    rend = _swig_new_instance_method(_frameCPP.AuxParameters_type_rend)
    clear = _swig_new_instance_method(_frameCPP.AuxParameters_type_clear)
    get_allocator = _swig_new_instance_method(_frameCPP.AuxParameters_type_get_allocator)
    pop_back = _swig_new_instance_method(_frameCPP.AuxParameters_type_pop_back)
    erase = _swig_new_instance_method(_frameCPP.AuxParameters_type_erase)

    def __init__(self, *args):
        r"""
        __init__(AuxParameters_type self) -> AuxParameters_type
        __init__(AuxParameters_type self, AuxParameters_type other) -> AuxParameters_type
        __init__(AuxParameters_type self, std::vector< AuxParam_type >::size_type size) -> AuxParameters_type
        __init__(AuxParameters_type self, std::vector< AuxParam_type >::size_type size, AuxParam_type value) -> AuxParameters_type
        1
        """
        _frameCPP.AuxParameters_type_swiginit(self, _frameCPP.new_AuxParameters_type(*args))
    push_back = _swig_new_instance_method(_frameCPP.AuxParameters_type_push_back)
    front = _swig_new_instance_method(_frameCPP.AuxParameters_type_front)
    back = _swig_new_instance_method(_frameCPP.AuxParameters_type_back)
    assign = _swig_new_instance_method(_frameCPP.AuxParameters_type_assign)
    resize = _swig_new_instance_method(_frameCPP.AuxParameters_type_resize)
    insert = _swig_new_instance_method(_frameCPP.AuxParameters_type_insert)
    reserve = _swig_new_instance_method(_frameCPP.AuxParameters_type_reserve)
    capacity = _swig_new_instance_method(_frameCPP.AuxParameters_type_capacity)
    __swig_destroy__ = _frameCPP.delete_AuxParameters_type

# Register AuxParameters_type in _frameCPP:
_frameCPP.AuxParameters_type_swigregister(AuxParameters_type)

class FrProcData(object):
    r"""

    FrProcData (Post-processed Data) implementation of the frame specification.

      Attributes:

        name        Data or channel name.
        comment     Comment.
        type        Type of data object.
        subType     Subtye for f-Series (TBD for other types).
        timeOffset  Offset of 1st sample relative to the frame start
                    time (seconds). Must be positive and smaller than
                    the frame length.
        tRange      Duration of sampled data (tStop-tStart).
        fShift      fShift is the frequency in the origional data
                    that corresponds to 0 Hz in the heterodyned series.
                    In multidimensional objects this applies to the first
                    frequency dimension.
        phase       Phase of hetrodyning signal at start of dataset
                    (radians, 0 if unknown).
        fRange      Frequency range (= fMax - fMin, 0 if unknown).
        BW          Resolution bandwidth.
        auxParam    Array of auxiliary parameters.
        data        Data vector.
        history     Channel history


    1
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    UNKNOWN_TYPE = _frameCPP.FrProcData_UNKNOWN_TYPE
    r"""1"""
    TIME_SERIES = _frameCPP.FrProcData_TIME_SERIES
    r"""1"""
    FREQUENCY_SERIES = _frameCPP.FrProcData_FREQUENCY_SERIES
    r"""1"""
    OTHER_1D_SERIES_DATA = _frameCPP.FrProcData_OTHER_1D_SERIES_DATA
    r"""1"""
    TIME_FREQUENCY = _frameCPP.FrProcData_TIME_FREQUENCY
    r"""1"""
    WAVELETS = _frameCPP.FrProcData_WAVELETS
    r"""1"""
    MULTI_DIMENSIONAL = _frameCPP.FrProcData_MULTI_DIMENSIONAL
    r"""1"""
    UNKNOWN_SUB_TYPE = _frameCPP.FrProcData_UNKNOWN_SUB_TYPE
    r"""1"""
    DFT = _frameCPP.FrProcData_DFT
    r"""1"""
    AMPLITUDE_SPECTRAL_DENSITY = _frameCPP.FrProcData_AMPLITUDE_SPECTRAL_DENSITY
    r"""1"""
    POWER_SPECTRAL_DENSITY = _frameCPP.FrProcData_POWER_SPECTRAL_DENSITY
    r"""1"""
    CROSS_SPECTRAL_DENSITY = _frameCPP.FrProcData_CROSS_SPECTRAL_DENSITY
    r"""1"""
    COHERENCE = _frameCPP.FrProcData_COHERENCE
    r"""1"""
    TRANSFER_FUNCTION = _frameCPP.FrProcData_TRANSFER_FUNCTION
    r"""1"""

    def __init__(self, *args):
        r"""

        FrProcData (Post-processed Data) implementation of the frame specification.

          Attributes:

            name        Data or channel name.
            comment     Comment.
            type        Type of data object.
            subType     Subtye for f-Series (TBD for other types).
            timeOffset  Offset of 1st sample relative to the frame start
                        time (seconds). Must be positive and smaller than
                        the frame length.
            tRange      Duration of sampled data (tStop-tStart).
            fShift      fShift is the frequency in the origional data
                        that corresponds to 0 Hz in the heterodyned series.
                        In multidimensional objects this applies to the first
                        frequency dimension.
            phase       Phase of hetrodyning signal at start of dataset
                        (radians, 0 if unknown).
            fRange      Frequency range (= fMax - fMin, 0 if unknown).
            BW          Resolution bandwidth.
            auxParam    Array of auxiliary parameters.
            data        Data vector.
            history     Channel history


        FrProcData (Post-processed Data) implementation of the frame specification.

          Attributes:

            name        Data or channel name.
            comment     Comment.
            type        Type of data object.
            subType     Subtye for f-Series (TBD for other types).
            timeOffset  Offset of 1st sample relative to the frame start
                        time (seconds). Must be positive and smaller than
                        the frame length.
            tRange      Duration of sampled data (tStop-tStart).
            fShift      fShift is the frequency in the origional data
                        that corresponds to 0 Hz in the heterodyned series.
                        In multidimensional objects this applies to the first
                        frequency dimension.
            phase       Phase of hetrodyning signal at start of dataset
                        (radians, 0 if unknown).
            fRange      Frequency range (= fMax - fMin, 0 if unknown).
            BW          Resolution bandwidth.
            auxParam    Array of auxiliary parameters.
            data        Data vector.
            history     Channel history


        1
        """
        _frameCPP.FrProcData_swiginit(self, _frameCPP.new_FrProcData(*args))
    GetName = _swig_new_instance_method(_frameCPP.FrProcData_GetName)
    GetComment = _swig_new_instance_method(_frameCPP.FrProcData_GetComment)
    GetType = _swig_new_instance_method(_frameCPP.FrProcData_GetType)
    GetSubType = _swig_new_instance_method(_frameCPP.FrProcData_GetSubType)
    GetTimeOffset = _swig_new_instance_method(_frameCPP.FrProcData_GetTimeOffset)
    GetTRange = _swig_new_instance_method(_frameCPP.FrProcData_GetTRange)
    GetFShift = _swig_new_instance_method(_frameCPP.FrProcData_GetFShift)
    GetPhase = _swig_new_instance_method(_frameCPP.FrProcData_GetPhase)
    GetFRange = _swig_new_instance_method(_frameCPP.FrProcData_GetFRange)
    GetBW = _swig_new_instance_method(_frameCPP.FrProcData_GetBW)
    GetAuxParam = _swig_new_instance_method(_frameCPP.FrProcData_GetAuxParam)
    SetComment = _swig_new_instance_method(_frameCPP.FrProcData_SetComment)
    SetTimeOffset = _swig_new_instance_method(_frameCPP.FrProcData_SetTimeOffset)
    SetTRange = _swig_new_instance_method(_frameCPP.FrProcData_SetTRange)
    SetAuxParam = _swig_new_instance_method(_frameCPP.FrProcData_SetAuxParam)
    AppendData = _swig_new_instance_method(_frameCPP.FrProcData_AppendData)
    AppendAuxParam = _swig_new_instance_method(_frameCPP.FrProcData_AppendAuxParam)
    AppendHistory = _swig_new_instance_method(_frameCPP.FrProcData_AppendHistory)
    RefDataSize = _swig_new_instance_method(_frameCPP.FrProcData_RefDataSize)
    RefData = _swig_new_instance_method(_frameCPP.FrProcData_RefData)
    RefAuxSize = _swig_new_instance_method(_frameCPP.FrProcData_RefAuxSize)
    RefAux = _swig_new_instance_method(_frameCPP.FrProcData_RefAux)
    RefHistorySize = _swig_new_instance_method(_frameCPP.FrProcData_RefHistorySize)
    RefHistory = _swig_new_instance_method(_frameCPP.FrProcData_RefHistory)
    RefTableSize = _swig_new_instance_method(_frameCPP.FrProcData_RefTableSize)
    RefTable = _swig_new_instance_method(_frameCPP.FrProcData_RefTable)
    name = property(_frameCPP.FrProcData_name_get, doc=r"""
    name : r.q(const).std::string
    1
    """)
    comment = property(_frameCPP.FrProcData_comment_get, _frameCPP.FrProcData_comment_set, doc=r"""
    comment : std::string
    1
    """)
    type = property(_frameCPP.FrProcData_type_get, doc=r"""
    type : FrProcData::type_type
    1
    """)
    subType = property(_frameCPP.FrProcData_subType_get, doc=r"""
    subType : FrProcData::subType_type
    1
    """)
    timeOffset = property(_frameCPP.FrProcData_timeOffset_get, _frameCPP.FrProcData_timeOffset_set, doc=r"""
    timeOffset : FrProcData::timeOffset_type
    1
    """)
    tRange = property(_frameCPP.FrProcData_tRange_get, _frameCPP.FrProcData_tRange_set, doc=r"""
    tRange : FrProcData::tRange_type
    1
    """)
    fShift = property(_frameCPP.FrProcData_fShift_get, doc=r"""
    fShift : FrProcData::fShift_type
    1
    """)
    phase = property(_frameCPP.FrProcData_phase_get, doc=r"""
    phase : FrProcData::phase_type
    1
    """)
    fRange = property(_frameCPP.FrProcData_fRange_get, doc=r"""
    fRange : FrProcData::fRange_type
    1
    """)
    BW = property(_frameCPP.FrProcData_BW_get, doc=r"""
    BW : FrProcData::BW_type
    1
    """)
    auxParam = property(_frameCPP.FrProcData_auxParam_get, doc=r"""
    auxParam : r.q(const).AuxParameters_type
    1
    """)
    data = property(_frameCPP.FrProcData_data_get, doc=r"""
    data : r.FrProcData::data_type
    1
    """)
    aux = property(_frameCPP.FrProcData_aux_get, doc=r"""
    aux : r.FrProcData::aux_type
    1
    """)
    table = property(_frameCPP.FrProcData_table_get, doc=r"""
    table : r.FrProcData::table_type
    1
    """)
    history = property(_frameCPP.FrProcData_history_get, doc=r"""
    history : r.FrProcData::history_type
    1
    """)
    __swig_destroy__ = _frameCPP.delete_FrProcData

# Register FrProcData in _frameCPP:
_frameCPP.FrProcData_swigregister(FrProcData)

class FrProcDataContainerBase(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_frameCPP.FrProcDataContainerBase_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_frameCPP.FrProcDataContainerBase___nonzero__)
    __bool__ = _swig_new_instance_method(_frameCPP.FrProcDataContainerBase___bool__)
    __len__ = _swig_new_instance_method(_frameCPP.FrProcDataContainerBase___len__)
    __getslice__ = _swig_new_instance_method(_frameCPP.FrProcDataContainerBase___getslice__)
    __setslice__ = _swig_new_instance_method(_frameCPP.FrProcDataContainerBase___setslice__)
    __delslice__ = _swig_new_instance_method(_frameCPP.FrProcDataContainerBase___delslice__)
    __delitem__ = _swig_new_instance_method(_frameCPP.FrProcDataContainerBase___delitem__)
    __getitem__ = _swig_new_instance_method(_frameCPP.FrProcDataContainerBase___getitem__)
    __setitem__ = _swig_new_instance_method(_frameCPP.FrProcDataContainerBase___setitem__)
    pop = _swig_new_instance_method(_frameCPP.FrProcDataContainerBase_pop)
    append = _swig_new_instance_method(_frameCPP.FrProcDataContainerBase_append)
    empty = _swig_new_instance_method(_frameCPP.FrProcDataContainerBase_empty)
    size = _swig_new_instance_method(_frameCPP.FrProcDataContainerBase_size)
    swap = _swig_new_instance_method(_frameCPP.FrProcDataContainerBase_swap)
    begin = _swig_new_instance_method(_frameCPP.FrProcDataContainerBase_begin)
    end = _swig_new_instance_method(_frameCPP.FrProcDataContainerBase_end)
    rbegin = _swig_new_instance_method(_frameCPP.FrProcDataContainerBase_rbegin)
    rend = _swig_new_instance_method(_frameCPP.FrProcDataContainerBase_rend)
    clear = _swig_new_instance_method(_frameCPP.FrProcDataContainerBase_clear)
    get_allocator = _swig_new_instance_method(_frameCPP.FrProcDataContainerBase_get_allocator)
    pop_back = _swig_new_instance_method(_frameCPP.FrProcDataContainerBase_pop_back)
    erase = _swig_new_instance_method(_frameCPP.FrProcDataContainerBase_erase)

    def __init__(self, *args):
        r"""
        __init__(FrProcDataContainerBase self) -> FrProcDataContainerBase
        __init__(FrProcDataContainerBase self, FrProcDataContainerBase other) -> FrProcDataContainerBase
        __init__(FrProcDataContainerBase self, std::vector< boost::shared_ptr< FrProcData > >::size_type size) -> FrProcDataContainerBase
        __init__(FrProcDataContainerBase self, std::vector< boost::shared_ptr< FrProcData > >::size_type size, std::vector< boost::shared_ptr< FrProcData > >::value_type const & value) -> FrProcDataContainerBase
        1
        """
        _frameCPP.FrProcDataContainerBase_swiginit(self, _frameCPP.new_FrProcDataContainerBase(*args))
    push_back = _swig_new_instance_method(_frameCPP.FrProcDataContainerBase_push_back)
    front = _swig_new_instance_method(_frameCPP.FrProcDataContainerBase_front)
    back = _swig_new_instance_method(_frameCPP.FrProcDataContainerBase_back)
    assign = _swig_new_instance_method(_frameCPP.FrProcDataContainerBase_assign)
    resize = _swig_new_instance_method(_frameCPP.FrProcDataContainerBase_resize)
    insert = _swig_new_instance_method(_frameCPP.FrProcDataContainerBase_insert)
    reserve = _swig_new_instance_method(_frameCPP.FrProcDataContainerBase_reserve)
    capacity = _swig_new_instance_method(_frameCPP.FrProcDataContainerBase_capacity)
    __swig_destroy__ = _frameCPP.delete_FrProcDataContainerBase

# Register FrProcDataContainerBase in _frameCPP:
_frameCPP.FrProcDataContainerBase_swigregister(FrProcDataContainerBase)

class FrProcDataContainer(FrProcDataContainerBase):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(FrProcDataContainer self) -> FrProcDataContainer
        1
        """
        _frameCPP.FrProcDataContainer_swiginit(self, _frameCPP.new_FrProcDataContainer())
    __swig_destroy__ = _frameCPP.delete_FrProcDataContainer

# Register FrProcDataContainer in _frameCPP:
_frameCPP.FrProcDataContainer_swigregister(FrProcDataContainer)

class FrSimData(object):
    r"""

    FrSimData (Simulated Data) implementation of the frame specification.

      Attributes:

        name           Name of simulated data.
        comment        Comment.
        sampleRate     Data Acquisition rate, samples/s.
        timeOffset     Offset of 1st sample relative to the frame start
                       time (seconds). Must be positive and smaller
                       than the frame length.
        fShift         fShift is the frequency (in Hz) in the origional
                       data that corresponds to 0 Hz in the heterodyned
                       series.
        phase          Phase (in radian) of heterodyning signal at
                       start of dataset.
        data           Data vector.

    1
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        FrSimData (Simulated Data) implementation of the frame specification.

          Attributes:

            name           Name of simulated data.
            comment        Comment.
            sampleRate     Data Acquisition rate, samples/s.
            timeOffset     Offset of 1st sample relative to the frame start
                           time (seconds). Must be positive and smaller
                           than the frame length.
            fShift         fShift is the frequency (in Hz) in the origional
                           data that corresponds to 0 Hz in the heterodyned
                           series.
            phase          Phase (in radian) of heterodyning signal at
                           start of dataset.
            data           Data vector.

        FrSimData (Simulated Data) implementation of the frame specification.

          Attributes:

            name           Name of simulated data.
            comment        Comment.
            sampleRate     Data Acquisition rate, samples/s.
            timeOffset     Offset of 1st sample relative to the frame start
                           time (seconds). Must be positive and smaller
                           than the frame length.
            fShift         fShift is the frequency (in Hz) in the origional
                           data that corresponds to 0 Hz in the heterodyned
                           series.
            phase          Phase (in radian) of heterodyning signal at
                           start of dataset.
            data           Data vector.

        1
        """
        _frameCPP.FrSimData_swiginit(self, _frameCPP.new_FrSimData(*args))
    GetName = _swig_new_instance_method(_frameCPP.FrSimData_GetName)
    GetComment = _swig_new_instance_method(_frameCPP.FrSimData_GetComment)
    GetSampleRate = _swig_new_instance_method(_frameCPP.FrSimData_GetSampleRate)
    GetTimeOffset = _swig_new_instance_method(_frameCPP.FrSimData_GetTimeOffset)
    GetFShift = _swig_new_instance_method(_frameCPP.FrSimData_GetFShift)
    GetPhase = _swig_new_instance_method(_frameCPP.FrSimData_GetPhase)
    SetSampleRate = _swig_new_instance_method(_frameCPP.FrSimData_SetSampleRate)
    SetTimeOffset = _swig_new_instance_method(_frameCPP.FrSimData_SetTimeOffset)
    AppendData = _swig_new_instance_method(_frameCPP.FrSimData_AppendData)
    RefDataSize = _swig_new_instance_method(_frameCPP.FrSimData_RefDataSize)
    RefData = _swig_new_instance_method(_frameCPP.FrSimData_RefData)
    name = property(_frameCPP.FrSimData_name_get, doc=r"""
    name : r.q(const).std::string
    1
    """)
    comment = property(_frameCPP.FrSimData_comment_get, doc=r"""
    comment : r.q(const).std::string
    1
    """)
    sampleRate = property(_frameCPP.FrSimData_sampleRate_get, _frameCPP.FrSimData_sampleRate_set, doc=r"""
    sampleRate : FrSimData::sampleRate_type
    1
    """)
    timeOffset = property(_frameCPP.FrSimData_timeOffset_get, _frameCPP.FrSimData_timeOffset_set, doc=r"""
    timeOffset : FrSimData::timeOffset_type
    1
    """)
    fShift = property(_frameCPP.FrSimData_fShift_get, doc=r"""
    fShift : FrSimData::fShift_type
    1
    """)
    phase = property(_frameCPP.FrSimData_phase_get, doc=r"""
    phase : FrSimData::phase_type
    1
    """)
    data = property(_frameCPP.FrSimData_data_get, doc=r"""
    data : r.FrSimData::data_type
    1
    """)
    __swig_destroy__ = _frameCPP.delete_FrSimData

# Register FrSimData in _frameCPP:
_frameCPP.FrSimData_swigregister(FrSimData)

class FrSimDataContainerBase(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_frameCPP.FrSimDataContainerBase_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_frameCPP.FrSimDataContainerBase___nonzero__)
    __bool__ = _swig_new_instance_method(_frameCPP.FrSimDataContainerBase___bool__)
    __len__ = _swig_new_instance_method(_frameCPP.FrSimDataContainerBase___len__)
    __getslice__ = _swig_new_instance_method(_frameCPP.FrSimDataContainerBase___getslice__)
    __setslice__ = _swig_new_instance_method(_frameCPP.FrSimDataContainerBase___setslice__)
    __delslice__ = _swig_new_instance_method(_frameCPP.FrSimDataContainerBase___delslice__)
    __delitem__ = _swig_new_instance_method(_frameCPP.FrSimDataContainerBase___delitem__)
    __getitem__ = _swig_new_instance_method(_frameCPP.FrSimDataContainerBase___getitem__)
    __setitem__ = _swig_new_instance_method(_frameCPP.FrSimDataContainerBase___setitem__)
    pop = _swig_new_instance_method(_frameCPP.FrSimDataContainerBase_pop)
    append = _swig_new_instance_method(_frameCPP.FrSimDataContainerBase_append)
    empty = _swig_new_instance_method(_frameCPP.FrSimDataContainerBase_empty)
    size = _swig_new_instance_method(_frameCPP.FrSimDataContainerBase_size)
    swap = _swig_new_instance_method(_frameCPP.FrSimDataContainerBase_swap)
    begin = _swig_new_instance_method(_frameCPP.FrSimDataContainerBase_begin)
    end = _swig_new_instance_method(_frameCPP.FrSimDataContainerBase_end)
    rbegin = _swig_new_instance_method(_frameCPP.FrSimDataContainerBase_rbegin)
    rend = _swig_new_instance_method(_frameCPP.FrSimDataContainerBase_rend)
    clear = _swig_new_instance_method(_frameCPP.FrSimDataContainerBase_clear)
    get_allocator = _swig_new_instance_method(_frameCPP.FrSimDataContainerBase_get_allocator)
    pop_back = _swig_new_instance_method(_frameCPP.FrSimDataContainerBase_pop_back)
    erase = _swig_new_instance_method(_frameCPP.FrSimDataContainerBase_erase)

    def __init__(self, *args):
        r"""
        __init__(FrSimDataContainerBase self) -> FrSimDataContainerBase
        __init__(FrSimDataContainerBase self, FrSimDataContainerBase other) -> FrSimDataContainerBase
        __init__(FrSimDataContainerBase self, std::vector< boost::shared_ptr< FrSimData > >::size_type size) -> FrSimDataContainerBase
        __init__(FrSimDataContainerBase self, std::vector< boost::shared_ptr< FrSimData > >::size_type size, std::vector< boost::shared_ptr< FrSimData > >::value_type const & value) -> FrSimDataContainerBase
        1
        """
        _frameCPP.FrSimDataContainerBase_swiginit(self, _frameCPP.new_FrSimDataContainerBase(*args))
    push_back = _swig_new_instance_method(_frameCPP.FrSimDataContainerBase_push_back)
    front = _swig_new_instance_method(_frameCPP.FrSimDataContainerBase_front)
    back = _swig_new_instance_method(_frameCPP.FrSimDataContainerBase_back)
    assign = _swig_new_instance_method(_frameCPP.FrSimDataContainerBase_assign)
    resize = _swig_new_instance_method(_frameCPP.FrSimDataContainerBase_resize)
    insert = _swig_new_instance_method(_frameCPP.FrSimDataContainerBase_insert)
    reserve = _swig_new_instance_method(_frameCPP.FrSimDataContainerBase_reserve)
    capacity = _swig_new_instance_method(_frameCPP.FrSimDataContainerBase_capacity)
    __swig_destroy__ = _frameCPP.delete_FrSimDataContainerBase

# Register FrSimDataContainerBase in _frameCPP:
_frameCPP.FrSimDataContainerBase_swigregister(FrSimDataContainerBase)

class FrSimDataContainer(FrSimDataContainerBase):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(FrSimDataContainer self) -> FrSimDataContainer
        1
        """
        _frameCPP.FrSimDataContainer_swiginit(self, _frameCPP.new_FrSimDataContainer())
    __swig_destroy__ = _frameCPP.delete_FrSimDataContainer

# Register FrSimDataContainer in _frameCPP:
_frameCPP.FrSimDataContainer_swigregister(FrSimDataContainer)

class FrSimEvent(object):
    r"""

    FrSimEvent (SimEvent) implementation of the frame specification.

      Attributes:

        name         Name of event.
        comment      Description of event.
        inputs       Input channels and filter parameters to event
                     process.
        GTime        GPS time corresponiding to reference value of
                     event, as defined by the search algorithm.
        timeBefore   Signal duration before (seconds).
        timeAfter    Signal duration after (seconds).
        amplitude    Continuous output amplitude returned by event.
        params       Array of additional event parameters.

    1
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        FrSimEvent (SimEvent) implementation of the frame specification.

          Attributes:

            name         Name of event.
            comment      Description of event.
            inputs       Input channels and filter parameters to event
                         process.
            GTime        GPS time corresponiding to reference value of
                         event, as defined by the search algorithm.
            timeBefore   Signal duration before (seconds).
            timeAfter    Signal duration after (seconds).
            amplitude    Continuous output amplitude returned by event.
            params       Array of additional event parameters.

        FrSimEvent (SimEvent) implementation of the frame specification.

          Attributes:

            name         Name of event.
            comment      Description of event.
            inputs       Input channels and filter parameters to event
                         process.
            GTime        GPS time corresponiding to reference value of
                         event, as defined by the search algorithm.
            timeBefore   Signal duration before (seconds).
            timeAfter    Signal duration after (seconds).
            amplitude    Continuous output amplitude returned by event.
            params       Array of additional event parameters.

        1
        """
        _frameCPP.FrSimEvent_swiginit(self, _frameCPP.new_FrSimEvent(*args))
    GetName = _swig_new_instance_method(_frameCPP.FrSimEvent_GetName)
    GetComment = _swig_new_instance_method(_frameCPP.FrSimEvent_GetComment)
    GetInputs = _swig_new_instance_method(_frameCPP.FrSimEvent_GetInputs)
    GetGTime = _swig_new_instance_method(_frameCPP.FrSimEvent_GetGTime)
    GetTimeBefore = _swig_new_instance_method(_frameCPP.FrSimEvent_GetTimeBefore)
    GetTimeAfter = _swig_new_instance_method(_frameCPP.FrSimEvent_GetTimeAfter)
    GetAmplitude = _swig_new_instance_method(_frameCPP.FrSimEvent_GetAmplitude)
    GetParam = _swig_new_instance_method(_frameCPP.FrSimEvent_GetParam)
    name = property(_frameCPP.FrSimEvent_name_get, doc=r"""
    name : r.q(const).FrSimEvent::name_type
    1
    """)
    comment = property(_frameCPP.FrSimEvent_comment_get, doc=r"""
    comment : r.q(const).FrSimEvent::comment_type
    1
    """)
    inputs = property(_frameCPP.FrSimEvent_inputs_get, doc=r"""
    inputs : r.q(const).FrSimEvent::inputs_type
    1
    """)
    GTime = property(_frameCPP.FrSimEvent_GTime_get, doc=r"""
    GTime : r.q(const).FrSimEvent::time_type
    1
    """)
    timeBefore = property(_frameCPP.FrSimEvent_timeBefore_get, doc=r"""
    timeBefore : FrSimEvent::timeBefore_type
    1
    """)
    timeAfter = property(_frameCPP.FrSimEvent_timeAfter_get, doc=r"""
    timeAfter : FrSimEvent::timeAfter_type
    1
    """)
    amplitude = property(_frameCPP.FrSimEvent_amplitude_get, doc=r"""
    amplitude : FrSimEvent::amplitude_type
    1
    """)
    params = property(_frameCPP.FrSimEvent_params_get, doc=r"""
    params : r.q(const).Parameters_type
    1
    """)
    __swig_destroy__ = _frameCPP.delete_FrSimEvent

# Register FrSimEvent in _frameCPP:
_frameCPP.FrSimEvent_swigregister(FrSimEvent)

class FrSimEventContainerBase(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_frameCPP.FrSimEventContainerBase_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_frameCPP.FrSimEventContainerBase___nonzero__)
    __bool__ = _swig_new_instance_method(_frameCPP.FrSimEventContainerBase___bool__)
    __len__ = _swig_new_instance_method(_frameCPP.FrSimEventContainerBase___len__)
    __getslice__ = _swig_new_instance_method(_frameCPP.FrSimEventContainerBase___getslice__)
    __setslice__ = _swig_new_instance_method(_frameCPP.FrSimEventContainerBase___setslice__)
    __delslice__ = _swig_new_instance_method(_frameCPP.FrSimEventContainerBase___delslice__)
    __delitem__ = _swig_new_instance_method(_frameCPP.FrSimEventContainerBase___delitem__)
    __getitem__ = _swig_new_instance_method(_frameCPP.FrSimEventContainerBase___getitem__)
    __setitem__ = _swig_new_instance_method(_frameCPP.FrSimEventContainerBase___setitem__)
    pop = _swig_new_instance_method(_frameCPP.FrSimEventContainerBase_pop)
    append = _swig_new_instance_method(_frameCPP.FrSimEventContainerBase_append)
    empty = _swig_new_instance_method(_frameCPP.FrSimEventContainerBase_empty)
    size = _swig_new_instance_method(_frameCPP.FrSimEventContainerBase_size)
    swap = _swig_new_instance_method(_frameCPP.FrSimEventContainerBase_swap)
    begin = _swig_new_instance_method(_frameCPP.FrSimEventContainerBase_begin)
    end = _swig_new_instance_method(_frameCPP.FrSimEventContainerBase_end)
    rbegin = _swig_new_instance_method(_frameCPP.FrSimEventContainerBase_rbegin)
    rend = _swig_new_instance_method(_frameCPP.FrSimEventContainerBase_rend)
    clear = _swig_new_instance_method(_frameCPP.FrSimEventContainerBase_clear)
    get_allocator = _swig_new_instance_method(_frameCPP.FrSimEventContainerBase_get_allocator)
    pop_back = _swig_new_instance_method(_frameCPP.FrSimEventContainerBase_pop_back)
    erase = _swig_new_instance_method(_frameCPP.FrSimEventContainerBase_erase)

    def __init__(self, *args):
        r"""
        __init__(FrSimEventContainerBase self) -> FrSimEventContainerBase
        __init__(FrSimEventContainerBase self, FrSimEventContainerBase other) -> FrSimEventContainerBase
        __init__(FrSimEventContainerBase self, std::vector< boost::shared_ptr< FrSimEvent > >::size_type size) -> FrSimEventContainerBase
        __init__(FrSimEventContainerBase self, std::vector< boost::shared_ptr< FrSimEvent > >::size_type size, std::vector< boost::shared_ptr< FrSimEvent > >::value_type const & value) -> FrSimEventContainerBase
        1
        """
        _frameCPP.FrSimEventContainerBase_swiginit(self, _frameCPP.new_FrSimEventContainerBase(*args))
    push_back = _swig_new_instance_method(_frameCPP.FrSimEventContainerBase_push_back)
    front = _swig_new_instance_method(_frameCPP.FrSimEventContainerBase_front)
    back = _swig_new_instance_method(_frameCPP.FrSimEventContainerBase_back)
    assign = _swig_new_instance_method(_frameCPP.FrSimEventContainerBase_assign)
    resize = _swig_new_instance_method(_frameCPP.FrSimEventContainerBase_resize)
    insert = _swig_new_instance_method(_frameCPP.FrSimEventContainerBase_insert)
    reserve = _swig_new_instance_method(_frameCPP.FrSimEventContainerBase_reserve)
    capacity = _swig_new_instance_method(_frameCPP.FrSimEventContainerBase_capacity)
    __swig_destroy__ = _frameCPP.delete_FrSimEventContainerBase

# Register FrSimEventContainerBase in _frameCPP:
_frameCPP.FrSimEventContainerBase_swigregister(FrSimEventContainerBase)

class FrSimEventContainer(FrSimEventContainerBase):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(FrSimEventContainer self) -> FrSimEventContainer
        1
        """
        _frameCPP.FrSimEventContainer_swiginit(self, _frameCPP.new_FrSimEventContainer())
    __swig_destroy__ = _frameCPP.delete_FrSimEventContainer

# Register FrSimEventContainer in _frameCPP:
_frameCPP.FrSimEventContainer_swigregister(FrSimEventContainer)

class FrTable(object):
    r"""

    FrTable implementation of the frame specification.

      Attributes:

        name           Name of simulated data.
        comment        Comment.
        column         Array of columns of table.

    1
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""

        FrTable implementation of the frame specification.

          Attributes:

            name           Name of simulated data.
            comment        Comment.
            column         Array of columns of table.

        FrTable implementation of the frame specification.

          Attributes:

            name           Name of simulated data.
            comment        Comment.
            column         Array of columns of table.

        1
        """
        _frameCPP.FrTable_swiginit(self, _frameCPP.new_FrTable(*args))
    GetName = _swig_new_instance_method(_frameCPP.FrTable_GetName)
    GetComment = _swig_new_instance_method(_frameCPP.FrTable_GetComment)
    RefColumn = _swig_new_instance_method(_frameCPP.FrTable_RefColumn)
    name = property(_frameCPP.FrTable_name_get, doc=r"""
    name : r.q(const).std::string
    1
    """)
    comment = property(_frameCPP.FrTable_comment_get, doc=r"""
    comment : r.q(const).std::string
    1
    """)
    column = property(_frameCPP.FrTable_column_get, doc=r"""
    column : r.q(const).FrTable::column_type
    1
    """)
    __swig_destroy__ = _frameCPP.delete_FrTable

# Register FrTable in _frameCPP:
_frameCPP.FrTable_swigregister(FrTable)

class FrTableContainerBase(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_frameCPP.FrTableContainerBase_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_frameCPP.FrTableContainerBase___nonzero__)
    __bool__ = _swig_new_instance_method(_frameCPP.FrTableContainerBase___bool__)
    __len__ = _swig_new_instance_method(_frameCPP.FrTableContainerBase___len__)
    __getslice__ = _swig_new_instance_method(_frameCPP.FrTableContainerBase___getslice__)
    __setslice__ = _swig_new_instance_method(_frameCPP.FrTableContainerBase___setslice__)
    __delslice__ = _swig_new_instance_method(_frameCPP.FrTableContainerBase___delslice__)
    __delitem__ = _swig_new_instance_method(_frameCPP.FrTableContainerBase___delitem__)
    __getitem__ = _swig_new_instance_method(_frameCPP.FrTableContainerBase___getitem__)
    __setitem__ = _swig_new_instance_method(_frameCPP.FrTableContainerBase___setitem__)
    pop = _swig_new_instance_method(_frameCPP.FrTableContainerBase_pop)
    append = _swig_new_instance_method(_frameCPP.FrTableContainerBase_append)
    empty = _swig_new_instance_method(_frameCPP.FrTableContainerBase_empty)
    size = _swig_new_instance_method(_frameCPP.FrTableContainerBase_size)
    swap = _swig_new_instance_method(_frameCPP.FrTableContainerBase_swap)
    begin = _swig_new_instance_method(_frameCPP.FrTableContainerBase_begin)
    end = _swig_new_instance_method(_frameCPP.FrTableContainerBase_end)
    rbegin = _swig_new_instance_method(_frameCPP.FrTableContainerBase_rbegin)
    rend = _swig_new_instance_method(_frameCPP.FrTableContainerBase_rend)
    clear = _swig_new_instance_method(_frameCPP.FrTableContainerBase_clear)
    get_allocator = _swig_new_instance_method(_frameCPP.FrTableContainerBase_get_allocator)
    pop_back = _swig_new_instance_method(_frameCPP.FrTableContainerBase_pop_back)
    erase = _swig_new_instance_method(_frameCPP.FrTableContainerBase_erase)

    def __init__(self, *args):
        r"""
        __init__(FrTableContainerBase self) -> FrTableContainerBase
        __init__(FrTableContainerBase self, FrTableContainerBase other) -> FrTableContainerBase
        __init__(FrTableContainerBase self, std::vector< boost::shared_ptr< FrTable > >::size_type size) -> FrTableContainerBase
        __init__(FrTableContainerBase self, std::vector< boost::shared_ptr< FrTable > >::size_type size, std::vector< boost::shared_ptr< FrTable > >::value_type const & value) -> FrTableContainerBase
        1
        """
        _frameCPP.FrTableContainerBase_swiginit(self, _frameCPP.new_FrTableContainerBase(*args))
    push_back = _swig_new_instance_method(_frameCPP.FrTableContainerBase_push_back)
    front = _swig_new_instance_method(_frameCPP.FrTableContainerBase_front)
    back = _swig_new_instance_method(_frameCPP.FrTableContainerBase_back)
    assign = _swig_new_instance_method(_frameCPP.FrTableContainerBase_assign)
    resize = _swig_new_instance_method(_frameCPP.FrTableContainerBase_resize)
    insert = _swig_new_instance_method(_frameCPP.FrTableContainerBase_insert)
    reserve = _swig_new_instance_method(_frameCPP.FrTableContainerBase_reserve)
    capacity = _swig_new_instance_method(_frameCPP.FrTableContainerBase_capacity)
    __swig_destroy__ = _frameCPP.delete_FrTableContainerBase

# Register FrTableContainerBase in _frameCPP:
_frameCPP.FrTableContainerBase_swigregister(FrTableContainerBase)

class FrTableContainer(FrTableContainerBase):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(FrTableContainer self) -> FrTableContainer
        1
        """
        _frameCPP.FrTableContainer_swiginit(self, _frameCPP.new_FrTableContainer())
    __swig_destroy__ = _frameCPP.delete_FrTableContainer

# Register FrTableContainer in _frameCPP:
_frameCPP.FrTableContainer_swigregister(FrTableContainer)

class FrTOC(object):
    r"""

    FrTOC (Table of Contents Structure) implementation of the frame specification.

      Atributes:

        ULeapS  From the first FrameH in this file.
        nFrame  Number of frames in this file.
        GTimeS  Array of GPS seconds of frame start times.
        GTimeN  Array of GPS nanoseconds of frame start times.

    1
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    GetNFrame = _swig_new_instance_method(_frameCPP.FrTOC_GetNFrame)
    GetNameDetector = _swig_new_instance_method(_frameCPP.FrTOC_GetNameDetector)
    GetDt = _swig_new_instance_method(_frameCPP.FrTOC_GetDt)
    GetGTimeS = _swig_new_instance_method(_frameCPP.FrTOC_GetGTimeS)
    GetGTimeN = _swig_new_instance_method(_frameCPP.FrTOC_GetGTimeN)
    GetADC = _swig_new_instance_method(_frameCPP.FrTOC_GetADC)
    GetProc = _swig_new_instance_method(_frameCPP.FrTOC_GetProc)
    GetSim = _swig_new_instance_method(_frameCPP.FrTOC_GetSim)
    GetULeapS = _swig_new_instance_method(_frameCPP.FrTOC_GetULeapS)
    ULeapS = property(_frameCPP.FrTOC_ULeapS_get, doc=r"""
    ULeapS : FrTOC::uleaps_type
    1
    """)
    nFrame = property(_frameCPP.FrTOC_nFrame_get, doc=r"""
    nFrame : FrTOC::nFrame_type
    1
    """)
    GTimeS = property(_frameCPP.FrTOC_GTimeS_get, doc=r"""
    GTimeS : r.q(const).FrTOC::gtimes_container_type
    1
    """)
    GTimeN = property(_frameCPP.FrTOC_GTimeN_get, doc=r"""
    GTimeN : r.q(const).FrTOC::gtimen_container_type
    1
    """)
    dt = property(_frameCPP.FrTOC_dt_get, doc=r"""
    dt : r.q(const).FrTOC::dt_container_type
    1
    """)

    def __init__(self):
        r"""

        FrTOC (Table of Contents Structure) implementation of the frame specification.

          Atributes:

            ULeapS  From the first FrameH in this file.
            nFrame  Number of frames in this file.
            GTimeS  Array of GPS seconds of frame start times.
            GTimeN  Array of GPS nanoseconds of frame start times.

        1
        """
        _frameCPP.FrTOC_swiginit(self, _frameCPP.new_FrTOC())
    __swig_destroy__ = _frameCPP.delete_FrTOC

# Register FrTOC in _frameCPP:
_frameCPP.FrTOC_swigregister(FrTOC)

class FrameH(object):
    r"""

    Frame Header implementation of the frame specification

      Attributes:
         name         Name of project or other experiment descrition.
                      (e.g., GEO; LIGO; VIRGO; TAMA; ... )
         run          Run number (number < 0 reserved for simulated data);
                      monotonic for experimental runs.
         frame        Frame number, monotonically increasing until end of
                      run, re-starting from 0 wit heach new run.
         dataQuality  A logical 32-bit word to denote top level quality of data.
                      Lowest order bits are reserved in pairs for the various
                      GW detectors.
         ULeapS       The integer number of leap seconds between GPS/TAI and
                      UTC in the epoch when the frame is written:
                      ULeapS = Int[TAI - UTC]. eg, ULeapS was 32 at the end
                      of 1999/07
         dt           Frame length in seconds.

    1
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    GetName = _swig_new_instance_method(_frameCPP.FrameH_GetName)
    GetRun = _swig_new_instance_method(_frameCPP.FrameH_GetRun)
    GetFrame = _swig_new_instance_method(_frameCPP.FrameH_GetFrame)
    GetDataQuality = _swig_new_instance_method(_frameCPP.FrameH_GetDataQuality)
    GetGTime = _swig_new_instance_method(_frameCPP.FrameH_GetGTime)
    GetULeapS = _swig_new_instance_method(_frameCPP.FrameH_GetULeapS)
    GetDt = _swig_new_instance_method(_frameCPP.FrameH_GetDt)
    SetName = _swig_new_instance_method(_frameCPP.FrameH_SetName)
    SetRun = _swig_new_instance_method(_frameCPP.FrameH_SetRun)
    SetGTime = _swig_new_instance_method(_frameCPP.FrameH_SetGTime)
    SetDt = _swig_new_instance_method(_frameCPP.FrameH_SetDt)
    RefType = _swig_new_instance_method(_frameCPP.FrameH_RefType)
    RefUser = _swig_new_instance_method(_frameCPP.FrameH_RefUser)
    RefDetectSim = _swig_new_instance_method(_frameCPP.FrameH_RefDetectSim)
    RefDetectProc = _swig_new_instance_method(_frameCPP.FrameH_RefDetectProc)
    RefHistory = _swig_new_instance_method(_frameCPP.FrameH_RefHistory)
    RefAuxData = _swig_new_instance_method(_frameCPP.FrameH_RefAuxData)
    RefAuxTable = _swig_new_instance_method(_frameCPP.FrameH_RefAuxTable)
    AppendFrAdcData = _swig_new_instance_method(_frameCPP.FrameH_AppendFrAdcData)
    AppendFrDetector = _swig_new_instance_method(_frameCPP.FrameH_AppendFrDetector)
    AppendFrEvent = _swig_new_instance_method(_frameCPP.FrameH_AppendFrEvent)
    AppendFrHistory = _swig_new_instance_method(_frameCPP.FrameH_AppendFrHistory)
    AppendFrProcData = _swig_new_instance_method(_frameCPP.FrameH_AppendFrProcData)
    AppendFrSimData = _swig_new_instance_method(_frameCPP.FrameH_AppendFrSimData)
    Write = _swig_new_instance_method(_frameCPP.FrameH_Write)
    name = property(_frameCPP.FrameH_name_get, doc=r"""
    name : r.q(const).std::string
    1
    """)
    run = property(_frameCPP.FrameH_run_get, _frameCPP.FrameH_run_set, doc=r"""
    run : FrameH::run_type
    1
    """)
    frame = property(_frameCPP.FrameH_frame_get, doc=r"""
    frame : FrameH::frame_type
    1
    """)
    dataQuality = property(_frameCPP.FrameH_dataQuality_get, doc=r"""
    dataQuality : FrameH::dataQuality_type
    1
    """)
    GTime = property(_frameCPP.FrameH_GTime_get, doc=r"""
    GTime : r.q(const).GPSTime
    1
    """)
    ULeapS = property(_frameCPP.FrameH_ULeapS_get, doc=r"""
    ULeapS : FrameH::ULeapS_type
    1
    """)
    dt = property(_frameCPP.FrameH_dt_get, _frameCPP.FrameH_dt_set, doc=r"""
    dt : FrameH::dt_type
    1
    """)
    type = property(_frameCPP.FrameH_type_get, doc=r"""
    type : r.q(const).FrameH::type_type
    1
    """)
    user = property(_frameCPP.FrameH_user_get, doc=r"""
    user : r.q(const).FrameH::user_type
    1
    """)
    detectSim = property(_frameCPP.FrameH_detectSim_get, doc=r"""
    detectSim : r.q(const).FrameH::detectSim_type
    1
    """)
    detectProc = property(_frameCPP.FrameH_detectProc_get, doc=r"""
    detectProc : r.q(const).FrameH::detectProc_type
    1
    """)
    history = property(_frameCPP.FrameH_history_get, doc=r"""
    history : r.q(const).FrameH::history_type
    1
    """)
    auxData = property(_frameCPP.FrameH_auxData_get, doc=r"""
    auxData : r.q(const).FrameH::auxData_type
    1
    """)
    auxTable = property(_frameCPP.FrameH_auxTable_get, doc=r"""
    auxTable : r.q(const).FrameH::auxTable_type
    1
    """)

    def __init__(self):
        r"""

        Frame Header implementation of the frame specification

          Attributes:
             name         Name of project or other experiment descrition.
                          (e.g., GEO; LIGO; VIRGO; TAMA; ... )
             run          Run number (number < 0 reserved for simulated data);
                          monotonic for experimental runs.
             frame        Frame number, monotonically increasing until end of
                          run, re-starting from 0 wit heach new run.
             dataQuality  A logical 32-bit word to denote top level quality of data.
                          Lowest order bits are reserved in pairs for the various
                          GW detectors.
             ULeapS       The integer number of leap seconds between GPS/TAI and
                          UTC in the epoch when the frame is written:
                          ULeapS = Int[TAI - UTC]. eg, ULeapS was 32 at the end
                          of 1999/07
             dt           Frame length in seconds.

        1
        """
        _frameCPP.FrameH_swiginit(self, _frameCPP.new_FrameH())
    __swig_destroy__ = _frameCPP.delete_FrameH

# Register FrameH in _frameCPP:
_frameCPP.FrameH_swigregister(FrameH)

DETECTOR_LOCATION_G1 = _frameCPP.DETECTOR_LOCATION_G1
r"""1"""
DETECTOR_LOCATION_H1 = _frameCPP.DETECTOR_LOCATION_H1
r"""1"""
DETECTOR_LOCATION_H2 = _frameCPP.DETECTOR_LOCATION_H2
r"""1"""
DETECTOR_LOCATION_K1 = _frameCPP.DETECTOR_LOCATION_K1
r"""1"""
DETECTOR_LOCATION_L1 = _frameCPP.DETECTOR_LOCATION_L1
r"""1"""
DETECTOR_LOCATION_T1 = _frameCPP.DETECTOR_LOCATION_T1
r"""1"""
DETECTOR_LOCATION_V1 = _frameCPP.DETECTOR_LOCATION_V1
r"""1"""
GetDetector = _frameCPP.GetDetector
class IFrameFStream(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HISTORY = _frameCPP.IFrameFStream_HISTORY
    r"""1"""
    DETECT_SIM = _frameCPP.IFrameFStream_DETECT_SIM
    r"""1"""
    DETECT_PROC = _frameCPP.IFrameFStream_DETECT_PROC
    r"""1"""
    AUX_DATA = _frameCPP.IFrameFStream_AUX_DATA
    r"""1"""
    AUX_TABLE = _frameCPP.IFrameFStream_AUX_TABLE
    r"""1"""
    TYPE = _frameCPP.IFrameFStream_TYPE
    r"""1"""
    USER = _frameCPP.IFrameFStream_USER
    r"""1"""

    def __init__(self, Filename):
        r"""
        __init__(IFrameFStream self, char const * Filename) -> IFrameFStream
        1
        """
        _frameCPP.IFrameFStream_swiginit(self, _frameCPP.new_IFrameFStream(Filename))
    FrameLibrary = _swig_new_instance_method(_frameCPP.IFrameFStream_FrameLibrary)
    FrameLibraryName = _swig_new_instance_method(_frameCPP.IFrameFStream_FrameLibraryName)
    GetNumberOfFrames = _swig_new_instance_method(_frameCPP.IFrameFStream_GetNumberOfFrames)
    GetTOC = _swig_new_instance_method(_frameCPP.IFrameFStream_GetTOC)
    LibraryRevision = _swig_new_instance_method(_frameCPP.IFrameFStream_LibraryRevision)
    ReadDetector = _swig_new_instance_method(_frameCPP.IFrameFStream_ReadDetector)
    ReadFrEvent = _swig_new_instance_method(_frameCPP.IFrameFStream_ReadFrEvent)
    ReadFrAdcData = _swig_new_instance_method(_frameCPP.IFrameFStream_ReadFrAdcData)
    ReadFrProcData = _swig_new_instance_method(_frameCPP.IFrameFStream_ReadFrProcData)
    ReadFrSimData = _swig_new_instance_method(_frameCPP.IFrameFStream_ReadFrSimData)
    ReadFrSimEvent = _swig_new_instance_method(_frameCPP.IFrameFStream_ReadFrSimEvent)
    ReadFrameN = _swig_new_instance_method(_frameCPP.IFrameFStream_ReadFrameN)
    ReadFrameNSubset = _swig_new_instance_method(_frameCPP.IFrameFStream_ReadFrameNSubset)
    ReadNextFrame = _swig_new_instance_method(_frameCPP.IFrameFStream_ReadNextFrame)
    Version = _swig_new_instance_method(_frameCPP.IFrameFStream_Version)
    __swig_destroy__ = _frameCPP.delete_IFrameFStream

# Register IFrameFStream in _frameCPP:
_frameCPP.IFrameFStream_swigregister(IFrameFStream)

class OFrameFStream(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Filename):
        r"""
        __init__(OFrameFStream self, char const * Filename) -> OFrameFStream
        1
        """
        _frameCPP.OFrameFStream_swiginit(self, _frameCPP.new_OFrameFStream(Filename))
    WriteFrame = _swig_new_instance_method(_frameCPP.OFrameFStream_WriteFrame)
    __swig_destroy__ = _frameCPP.delete_OFrameFStream

# Register OFrameFStream in _frameCPP:
_frameCPP.OFrameFStream_swigregister(OFrameFStream)



